<%- include("../../views/partials/admin/header") %>

<style>
    /* Custom CSS for Orders Page */
    :root {
        --primary-brown: #5D4037;
        --secondary-brown: #8B6B61;
        --light-brown: #A1887F;
        --background-brown: #f8f4f0;
        --border-brown: #e8d9c5;
        --text-dark: #3E2723;
        --text-light: #8D6E63;
        --shadow-color: rgba(93, 64, 55, 0.1);
        --return-orange: #FF6B35;
        --return-red: #E53E3E;
        --return-blue: #3182CE;
    }

    .container-fluid {
        background-color: var(--background-brown);
        min-height: 100vh;
        padding: 2rem;
    }
    
    .page-title {
        color: var(--primary-brown);
        font-weight: 600;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid var(--light-brown);
        margin-top: 10px;
        margin-left: 250px;
        font-family: 'Cormorant Garamond', serif;
    }

    .card {
        border: none;
        box-shadow: 0 4px 6px var(--shadow-color);
        border-radius: 10px;
        margin-bottom: 2rem;
        background-color: white;
    }

    .card-body {
        padding: 1.5rem;
        margin-top: 20px;
        margin-left: 200px;
    }

    /* Search and Filter Section */
    #searchForm {
        background-color: white;
        padding: 1.5rem;
        border-radius: 10px;
    }

    .form-control, .form-select {
        border: 1px solid var(--border-brown);
        border-radius: 5px;
        padding: 0.75rem;
        color: var(--text-dark);
    }

    .form-control:focus, .form-select:focus {
        border-color: var(--primary-brown);
        box-shadow: 0 0 0 0.2rem rgba(93, 64, 55, 0.25);
    }

    .btn-primary {
        background-color: var(--primary-brown);
        border-color: var(--primary-brown);
        padding: 0.75rem 1.5rem;
        font-weight: 500;
    }

    .btn-primary:hover {
        background-color: var(--secondary-brown);
        border-color: var(--secondary-brown);
    }

    /* Table Styling */
    .table {
        margin-bottom: 0;
    }

    .table thead th {
        background-color: var(--primary-brown);
        color: white;
        font-weight: 500;
        border: none;
        padding: 1rem;
    }

    .table tbody td {
        padding: 1rem;
        vertical-align: middle;
        border-bottom: 1px solid var(--border-brown);
        color: var(--text-dark);
    }

    .table tbody tr:hover {
        background-color: var(--background-brown);
    }

    /* Return Request Indicators */
    .return-indicator {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.25rem 0.75rem;
        background-color: var(--return-orange);
        color: white;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
        margin-left: 0.5rem;
        animation: pulse 2s infinite;
    }

    .return-indicator.urgent {
        background-color: var(--return-red);
        animation: flash 1.5s infinite;
    }

    .return-indicator.partial {
        background-color: var(--return-blue);
        animation: pulse 2s infinite;
    }

    .return-icon {
        width: 14px;
        height: 14px;
        fill: currentColor;
    }

    /* Return Item Identifiers */
    .return-items-list {
        display: flex;
        flex-wrap: wrap;
        gap: 0.25rem;
        margin-top: 0.5rem;
    }

    .return-item-badge {
        background-color: #FFF3E0;
        color: #E65100;
        border: 1px solid #FFB74D;
        padding: 0.2rem 0.5rem;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        gap: 0.25rem;
    }

    .return-item-badge.priority {
        background-color: #FFEBEE;
        color: #C62828;
        border-color: #EF5350;
        animation: glow 2s infinite;
    }

    .return-item-icon {
        width: 10px;
        height: 10px;
        fill: currentColor;
    }

    @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.7; }
    }

    @keyframes flash {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
    }

    @keyframes glow {
        0% { box-shadow: 0 0 5px rgba(239, 83, 80, 0.5); }
        50% { box-shadow: 0 0 10px rgba(239, 83, 80, 0.8); }
        100% { box-shadow: 0 0 5px rgba(239, 83, 80, 0.5); }
    }

    /* Enhanced Status Badges */
    .status-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-weight: 500;
        font-size: 0.9rem;
    }

    .status-badge.pending {
        background-color: #FFF3CD;
        color: #856404;
        border: 1px solid #FFEAA7;
    }

    .status-badge.processing {
        background-color: #D1ECF1;
        color: #0C5460;
        border: 1px solid #B8DAFF;
    }

    .status-badge.shipped {
        background-color: #D4EDDA;
        color: #155724;
        border: 1px solid #C3E6CB;
    }

    .status-badge.delivered {
        background-color: #D4EDDA;
        color: #155724;
        border: 1px solid #C3E6CB;
    }

    .status-badge.cancelled {
        background-color: #F8D7DA;
        color: #721C24;
        border: 1px solid #F5C6CB;
    }

    .status-badge.return-request {
        background-color: #FFE8E1;
        color: #D63384;
        border: 1px solid #FF6B35;
        position: relative;
        overflow: hidden;
    }

    .status-badge.return-request::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
        animation: shimmer 2s infinite;
    }

    .status-badge.returned {
        background-color: #F8D7DA;
        color: #721C24;
        border: 1px solid #F5C6CB;
    }

    .status-badge.out-for-delivery {
        background-color: #CCE5FF;
        color: #004085;
        border: 1px solid #99D3FF;
    }

    @keyframes shimmer {
        0% { left: -100%; }
        100% { left: 100%; }
    }

    /* Row highlighting for return requests */
    .table tbody tr.return-request-row {
        background-color: #FFF8F5;
        border-left: 4px solid var(--return-orange);
    }

    .table tbody tr.return-request-row:hover {
        background-color: #FFE8E1;
    }

    /* Status Select Styling */
    .status-select {
        min-width: 150px;
        background-color: white;
    }

    /* Action Buttons */
    .btn-info {
        background-color: var(--secondary-brown);
        border-color: var(--secondary-brown);
        color: white;
    }

    .btn-info:hover {
        background-color: var(--primary-brown);
        border-color: var(--primary-brown);
        color: white;
    }

    .btn-warning {
        background-color: var(--light-brown);
        border-color: var(--light-brown);
        color: var(--text-dark);
    }

    .btn-warning:hover {
        background-color: var(--accent-brown);
        border-color: var(--accent-brown);
        color: white;
    }

    /* Enhanced Pagination Styling */
    .pagination-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 2rem;
        padding: 1rem;
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 2px 4px var(--shadow-color);
    }

    .pagination-info {
        color: var(--text-dark);
        font-size: 0.9rem;
    }

    .pagination {
        margin: 0;
    }

    .page-link {
        color: var(--primary-brown);
        border: 1px solid var(--border-brown);
        padding: 0.5rem 1rem;
        margin: 0 2px;
        border-radius: 5px;
        transition: all 0.3s ease;
    }

    .page-item.active .page-link {
        background-color: var(--primary-brown);
        border-color: var(--primary-brown);
        color: white;
    }

    .page-link:hover {
        color: var(--text-dark);
        background-color: var(--background-brown);
        border-color: var(--border-brown);
    }

    .page-item.disabled .page-link {
        color: #6c757d;
        pointer-events: none;
        background-color: #fff;
        border-color: #dee2e6;
    }

    .page-size-selector {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .page-size-selector label {
        color: var(--text-dark);
        margin-bottom: 0;
    }

    .page-size-selector .form-select {
        width: auto;
        padding: 0.25rem 2rem 0.25rem 0.5rem;
    }

    /* Modal Styling */
    .modal-content {
        border: none;
        border-radius: 10px;
        box-shadow: 0 4px 6px var(--shadow-color);
    }

    .modal-header {
        background-color: var(--primary-brown);
        color: white;
        border-radius: 10px 10px 0 0;
    }

    .modal-title {
        font-weight: 500;
    }

    .btn-close {
        filter: brightness(0) invert(1);
    }

    .modal-body {
        padding: 1.5rem;
    }

    .modal-footer {
        border-top: 1px solid var(--border-brown);
    }

    /* Order Details Styling */
    .order-details-section {
        background-color: white;
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 1.5rem;
    }

    .order-details-section h6 {
        color: var(--primary-brown);
        font-weight: 600;
        margin-bottom: 1rem;
    }

    .order-details-section p {
        margin-bottom: 0.5rem;
    }

    .order-details-section strong {
        color: var(--dark-brown);
    }

    /* Return Items Details */
    .return-items-details {
        background-color: #FFF8F5;
        border: 1px solid #FFE0B2;
        border-radius: 8px;
        padding: 1rem;
        margin-top: 1rem;
    }

    .return-items-details h6 {
        color: var(--return-orange);
        margin-bottom: 0.75rem;
        font-size: 1rem;
    }

    .return-item-detail {
        background-color: white;
        border: 1px solid #FFE0B2;
        border-radius: 6px;
        padding: 0.75rem;
        margin-bottom: 0.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .return-item-detail:last-child {
        margin-bottom: 0;
    }

    .return-item-info {
        flex: 1;
    }

    .return-item-id {
        font-weight: 600;
        color: var(--return-orange);
        font-size: 0.85rem;
    }

    .return-item-name {
        color: var(--text-dark);
        font-size: 0.9rem;
        margin-top: 0.25rem;
    }

    .return-item-reason {
        color: var(--text-light);
        font-size: 0.8rem;
        margin-top: 0.25rem;
        font-style: italic;
    }

    .return-item-status {
        padding: 0.25rem 0.5rem;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .return-item-status.pending {
        background-color: #FFF3CD;
        color: #856404;
    }

    .return-item-status.approved {
        background-color: #D4EDDA;
        color: #155724;
    }

    .return-item-status.rejected {
        background-color: #F8D7DA;
        color: #721C24;
    }

    /* Return Request Modal */
    #returnRequestForm .form-label {
        color: var(--dark-brown);
        font-weight: 500;
    }

    #returnRequestForm .form-control,
    #returnRequestForm .form-select {
        margin-bottom: 1rem;
    }

    /* Notifications */
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
    }
    
    .toast {
        background-color: white;
        border: none;
        box-shadow: 0 4px 6px var(--shadow-color);
    }
    
    .toast-header {
        background-color: var(--primary-brown);
        color: white;
    }
    
    .toast-success {
        background-color: var(--light-brown);
        color: var(--dark-brown);
    }
    
    .toast-error {
        background-color: #f8d7da;
        color: #38080dc2;
    }

    /* Status Badges */
    .badge {
        padding: 0.5rem 1rem;
        border-radius: 5px;
        font-weight: 500;
    }

    .badge.bg-success {
        background-color: var(--secondary-brown) !important;
    }

    .badge.bg-warning {
        background-color: var(--light-brown) !important;
        color: white;
    }

    .badge.bg-danger {
        background-color: var(--primary-brown) !important;
    }

    /* Return Request Counter */
    .return-counter {
        background-color: var(--return-red);
        color: white;
        border-radius: 50%;
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
        font-weight: bold;
        margin-left: 0.5rem;
        min-width: 20px;
        height: 20px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        animation: bounce 1s infinite;
    }

    @keyframes bounce {
        0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
        40% { transform: translateY(-5px); }
        60% { transform: translateY(-3px); }
    }
</style>

<div class="container-fluid px-4">
    <h1 class="page-title">Order Management</h1>
    
    <!-- Toast notifications -->
    <div class="toast-container"></div>
    
    <!-- Search and Filter Section -->
    <div class="card mb-4">
        <div class="card-body">
            <form id="searchForm" class="row g-3">
                <div class="col-md-4">
                    <input type="text" class="form-control" id="searchInput" placeholder="Search by Order ID, Customer Name or Phone">
                   
                </div>
                <div class="col-md-3">
                    <select class="form-select" id="statusFilter">
                        <option value="">All Status</option>
                        <option value="Pending">Pending</option>
                        <option value="Processing">Processing</option>
                        <option value="Shipped">Shipped</option>
                        <option value="Out for Delivery">Out for Delivery</option>
                        <option value="Delivered">Delivered</option>
                        <option value="Payment Failed">Payment Failed</option>
                        <option value="Cancelled">Cancelled</option>
                        <option value="Return Request">Return Request</option>
                        <option value="Returned">Returned</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <select class="form-select" id="sortBy">
                        <option value="createdAt" selected>Sort by Date & Time</option>
                        <option value="totalPrice">Sort by Amount</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <div id="currentDateTime" class="text-end mb-2" style="font-size: 0.9rem; color: var(--text-dark);"></div>
                    <button type="submit" class="btn btn-primary w-100">Search</button>
                </div>
            </form>
        </div>
    </div>


    
    <!-- Orders Table -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Date</th>
                            <th>Customer</th>
                            <th>Amount</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="ordersTableBody">
                        <!-- Orders will be populated here -->
                    </tbody>
                </table>
            </div>
            
            <!-- Pagination section -->
            <div class="pagination-container">
                <div class="pagination-info">
                    Showing <span id="startRecord">0</span> to <span id="endRecord">0</span> of <span id="totalRecords">0</span> orders
                </div>
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center" id="pagination">
                        <!-- Pagination will be populated here -->
                    </ul>
                </nav>
                <div class="page-size-selector">
                    <label for="pageSize">Show:</label>
                    <select class="form-select form-select-sm" id="pageSize">
                        <option value="20">20</option>
                        <option value="25">25</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                    </select>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Order Details Modal -->
<div class="modal fade" id="orderDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Order Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="orderDetailsContent">
                <!-- Order details will be populated here -->
            </div>
            <div class="modal-footer" id="orderDetailsFooter">
                <!-- Action buttons will be populated here -->
            </div>
        </div>
    </div>
</div>

<!-- Return Request Modal -->
<div class="modal fade" id="returnRequestModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Handle Return Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="returnRequestForm">
                    <div class="row">
                        <div class="col-md-6">
                            <label class="form-label">Action</label>
                            <select class="form-select" id="returnAction" required>
                                <option value="accept">Accept Return</option>
                                <option value="reject">Reject Return</option>
                                <option value="partial">Partial Accept</option>
                            </select>
                        </div>
                        <div class="col-md-6" id="refundAmountSection" style="display: none;">
                            <label class="form-label">Total Refund Amount (₹)</label>
                            <input type="number" class="form-control" id="refundAmount" step="0.01" required>
                            <small class="text-muted">This amount will be credited to the user's wallet</small>
                        </div>
                    </div>
                    
                    <!-- Return Items Selection -->
                    <div id="returnItemsSection" style="display: none; margin-top: 1rem;">
                        <h6>Select Items to Process:</h6>
                        <div id="returnItemsList">
                            <!-- Return items will be populated here -->
                        </div>
                    </div>
                    
                    <div class="mt-3" id="rejectReasonSection" style="display: none;">
                        <label class="form-label">Rejection Reason</label>
                        <textarea class="form-control" id="rejectReason" rows="3" required></textarea>
                        <small class="text-muted">Please provide a reason for rejecting the return request</small>
                    </div>
                    
                    <div class="mt-3">
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
// Global variables to track state
let currentPage = 1;
let currentOrderId = null;
let pageSize = 10;
let statusFilter = '';
let searchQuery = '';
let sortBy = 'createdAt';
let isUpdating = false;

// Function to generate return item ID
function generateReturnItemId(orderId, itemIndex) {
    return `RET-${orderId.slice(-6)}-${String(itemIndex + 1).padStart(2, '0')}`;
}

// Function to get status badge class and return indicator
function getStatusInfo(status, orderedItems = []) {
    const statusLower = status.toLowerCase().replace(/\s+/g, '-');
    let badgeClass = `status-badge ${statusLower}`;
    let showReturnIndicator = false;
    let isUrgent = false;
    let isPartial = false;
    let returnRequestItems = [];

    // Check for item-level return requests
    if (orderedItems && orderedItems.length > 0) {
        returnRequestItems = orderedItems.filter(item => item.status === 'Return Requested');
        if (returnRequestItems.length > 0) {
            showReturnIndicator = true;
            isUrgent = returnRequestItems.some(item => item.priority === 'high');
            isPartial = returnRequestItems.length > 0 && returnRequestItems.length < orderedItems.length;
        }
    }
    // Also check for order-level return request
    if (status === 'Return Request') {
        showReturnIndicator = true;
        // If order-level, you may want to use all items or a special flag
    }

    return { badgeClass, showReturnIndicator, isUrgent, isPartial, returnRequestItems };
}

// Function to create return indicator HTML
function createReturnIndicator(isUrgent = false, isPartial = false) {
    const urgentClass = isUrgent ? ' urgent' : isPartial ? ' partial' : '';
    const text = isPartial ? 'PARTIAL RETURN' : 'RETURN REQ';
    return `
        <span class="return-indicator${urgentClass}">
            <svg class="return-icon" viewBox="0 0 24 24">
                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
            </svg>
            ${text}
        </span>
    `;
}

// Function to create return items list HTML
function createReturnItemsList(returnItems, orderId) {
    if (!returnItems || returnItems.length === 0) return '';
    
    return `
        <div class="return-items-list">
            ${returnItems.map((item, index) => {
                const itemId = generateReturnItemId(orderId, index);
                const priorityClass = item.priority === 'high' ? ' priority' : '';
                return `
                    <span class="return-item-badge${priorityClass}" title="Return ID: ${itemId}&#10;Item: ${item.name || 'Product'}&#10;Reason: ${item.reason || 'Not specified'}">
                        <svg class="return-item-icon" viewBox="0 0 24 24">
                            <path d="M19 7h-3V6a4 4 0 0 0-8 0v1H5a1 1 0 0 0 0 2h1v11a3 3 0 0 0 3 3h8a3 3 0 0 0 3-3V9h1a1 1 0 0 0 0-2zM10 6a2 2 0 0 1 4 0v1h-4V6zm8 15a1 1 0 0 1-1 1H9a1 1 0 0 1-1-1V9h10v12z"/>
                        </svg>
                        ${itemId}
                    </span>
                `;
            }).join('')}
        </div>
    `;
}

// Function to show toast notifications
function showToast(message, type = 'success') {
    const toastContainer = document.querySelector('.toast-container');
    const toast = document.createElement('div');
    toast.classList.add('toast', 'show', `toast-${type}`);
    toast.innerHTML = `
        <div class="toast-header">
            <strong class="me-auto">${type === 'success' ? 'Success' : 'Error'}</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
        </div>
        <div class="toast-body">${message}</div>
    `;
    toastContainer.appendChild(toast);
    
    // Auto-remove toast after 5 seconds
    setTimeout(() => {
        toast.remove();
    }, 5000);
    
    // Add click listener to close button
    toast.querySelector('.btn-close').addEventListener('click', () => {
        toast.remove();
    });
}

// Function to update current date and time
function updateCurrentDateTime() {
    const now = new Date();
    const dateTimeString = now.toLocaleString('en-IN', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: true
    });
    document.getElementById('currentDateTime').textContent = dateTimeString;
}

// Update date and time every second
setInterval(updateCurrentDateTime, 1000);
updateCurrentDateTime(); // Initial call

// Function to load orders
async function loadOrders(page = 1) {
    try {
        // Update current page
        currentPage = page;
        
        // Get filter values
        searchQuery = document.getElementById('searchInput').value;
        statusFilter = document.getElementById('statusFilter').value;
        sortBy = document.getElementById('sortBy').value;
        pageSize = document.getElementById('pageSize').value;
        
        // Show loading indicator
        document.getElementById('ordersTableBody').innerHTML = '<tr><td colspan="6" class="text-center">Loading orders...</td></tr>';
        
        // Construct query parameters
        const queryParams = new URLSearchParams({
            page: page,
            limit: pageSize,
            search: searchQuery,
            status: statusFilter,
            sortBy: sortBy,
            sortOrder: 'desc' // Always sort in descending order (newest first)
        });
        
        const response = await fetch(`/admin/api/orders?${queryParams.toString()}`);
        
        if (!response.ok) {
            throw new Error('Failed to load orders');
        }
        
        const data = await response.json();
        
        // Update pagination info
        const startRecord = ((data.pagination.currentPage - 1) * data.pagination.limit) + 1;
        const endRecord = Math.min(startRecord + data.pagination.limit - 1, data.pagination.totalOrders);
        
        document.getElementById('startRecord').textContent = data.pagination.totalOrders > 0 ? startRecord : 0;
        document.getElementById('endRecord').textContent = endRecord;
        document.getElementById('totalRecords').textContent = data.pagination.totalOrders;
        
        // Populate orders table
        const tableBody = document.getElementById('ordersTableBody');
        tableBody.innerHTML = '';
        
        if (!data.orders || data.orders.length === 0) {
            tableBody.innerHTML = '<tr><td colspan="6" class="text-center">No orders found</td></tr>';
            return;
        }
        
        data.orders.forEach(order => {
            // Format date and time properly
            const orderDate = order.createdAt || order.createdOn;
            const formattedDateTime = orderDate ? new Date(orderDate).toLocaleString('en-IN', {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                hour12: true
            }) : 'N/A';
            
            // Get status information with return items
            const statusInfo = getStatusInfo(order.status, order.orderedItems || []);
            
            const row = document.createElement('tr');
            
            // Add special class for return request rows
            if (order.status === 'Return Request') {
                row.classList.add('return-request-row');
            }
            
            row.innerHTML = `
                <td>
                    ${order._id}
                    ${statusInfo.showReturnIndicator ? createReturnIndicator(statusInfo.isUrgent, statusInfo.isPartial) : ''}
                    ${statusInfo.showReturnIndicator ? createReturnItemsList(statusInfo.returnRequestItems, order._id) : ''}
                </td>
                <td>${formattedDateTime}</td>
                <td>
                    ${order.userId ? order.userId.name : 'N/A'}
                    <br><small>${order.userId ? order.userId.email : 'N/A'}</small>
                </td>
                <td>₹${order.totalPrice ? order.totalPrice.toFixed(2) : '0.00'}</td>
                <td>
                    <span class="${statusInfo.badgeClass}">
                        ${order.status}
                        ${order.status === 'Return Request' ? '<span class="return-counter">!</span>' : ''}
                    </span>
                </td>
                <td>
                    <a class="btn btn-sm btn-info view-details" href="/admin/orders/${order._id}">
                        View
                        ${order.status === 'Return Request' ? 
                            '<svg style="width: 14px; height: 14px; margin-left: 5px;" viewBox="0 0 24 24" fill="currentColor"><path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/></svg>' : 
                            ''
                        }
                    </a>
                </td>
            `;
            tableBody.appendChild(row);
        });
        
        // Update pagination
        updatePagination(data.pagination);
        
    } catch (error) {
        console.error('Error loading orders:', error);
        document.getElementById('ordersTableBody').innerHTML = 
            '<tr><td colspan="6" class="text-center text-danger">Error loading orders. Please try again.</td></tr>';
        showToast('Error loading orders. Please try again.', 'error');
    }
}

// Function to update pagination
function updatePagination(pagination) {
    const paginationElement = document.getElementById('pagination');
    paginationElement.innerHTML = '';
    
    // No pagination needed if there's only one page
    if (pagination.totalPages <= 1) {
        return;
    }
    
    // Previous button
    paginationElement.innerHTML += `
        <li class="page-item ${!pagination.hasPrevPage ? 'disabled' : ''}">
            <a class="page-link" href="#" data-page="${pagination.prevPage || 1}">Previous</a>
        </li>
    `;
    
    // Calculate range of page numbers to show
    let startPage = Math.max(1, pagination.currentPage - 2);
    let endPage = Math.min(pagination.totalPages, startPage + 4);
    
    if (endPage - startPage < 4) {
        startPage = Math.max(1, endPage - 4);
    }
    
    // First page
    if (startPage > 1) {
        paginationElement.innerHTML += `
            <li class="page-item">
                <a class="page-link" href="#" data-page="1">1</a>
            </li>
        `;
        if (startPage > 2) {
            paginationElement.innerHTML += `
                <li class="page-item disabled">
                    <span class="page-link">...</span>
                </li>
            `;
        }
    }
    
    // Page numbers
    for (let i = startPage; i <= endPage; i++) {
        paginationElement.innerHTML += `
            <li class="page-item ${pagination.currentPage === i ? 'active' : ''}">
                <a class="page-link" href="#" data-page="${i}">${i}</a>
            </li>
        `;
    }
    
    // Last page
    if (endPage < pagination.totalPages) {
        if (endPage < pagination.totalPages - 1) {
            paginationElement.innerHTML += `
                <li class="page-item disabled">
                    <span class="page-link">...</span>
                </li>
            `;
        }
        paginationElement.innerHTML += `
            <li class="page-item">
                <a class="page-link" href="#" data-page="${pagination.totalPages}">${pagination.totalPages}</a>
            </li>
        `;
    }
    
    // Next button
    paginationElement.innerHTML += `
        <li class="page-item ${!pagination.hasNextPage ? 'disabled' : ''}">
            <a class="page-link" href="#" data-page="${pagination.nextPage || pagination.totalPages}">Next</a>
        </li>
    `;
}

// Function to update order status
async function updateOrderStatus(orderId, newStatus) {
    if (isUpdating) return; // Prevent concurrent updates
    
    isUpdating = true;
    
    try {
        const response = await fetch(`/admin/api/orders/${orderId}/status`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status: newStatus })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Failed to update status');
        }
        
        // Show success notification
        showToast('Order status updated successfully');
        
        // Refresh the current page
        await loadOrders(currentPage);
        
    } catch (error) {
        console.error('Error updating status:', error);
        showToast(error.message || 'Error updating order status', 'error');
        
        // Reload to reset any invalid states
        await loadOrders(currentPage);
    } finally {
        isUpdating = false;
    }
}

// Function to handle return request
async function handleReturnRequest(orderId, action) {
    if (isUpdating) return;
    
    isUpdating = true;
    
    try {
        // Show the return request modal
        const modal = new bootstrap.Modal(document.getElementById('returnRequestModal'));
        currentOrderId = orderId;
        
        // Set default values
        const actionSelect = document.getElementById('returnAction');
        actionSelect.value = action;
        
        // Show/hide sections based on action
        const refundSection = document.getElementById('refundAmountSection');
        const refundInput = document.getElementById('refundAmount');
        const rejectSection = document.getElementById('rejectReasonSection');
        const rejectInput = document.getElementById('rejectReason');
        
        if (action === 'accept') {
            refundSection.style.display = 'block';
            rejectSection.style.display = 'none';
            refundInput.required = true;
            rejectInput.required = false;
            // Fetch order details to set default refund amount
            const response = await fetch(`/admin/api/orders/${orderId}`);
            if (response.ok) {
                const order = await response.json();
                refundInput.value = order.totalPrice || 0;
            }
        } else {
            refundSection.style.display = 'none';
            rejectSection.style.display = 'block';
            rejectInput.required = true;
        }
        
        // Add event listener for action change
        actionSelect.addEventListener('change', function() {
            const selectedAction = this.value;
            if (selectedAction === 'accept') {
                refundSection.style.display = 'block';
                rejectSection.style.display = 'none';
                refundInput.required = true;
                rejectInput.required = false;
            } else {
                refundSection.style.display = 'none';
                rejectSection.style.display = 'block';
                rejectInput.required = true;
            }
        });
        
        modal.show();
        
    } catch (error) {
        console.error('Error preparing return request:', error);
        showToast('Error preparing return request. Please try again.', 'error');
    } finally {
        isUpdating = false;
    }
}

// Function to load order details
async function loadOrderDetails(orderId) {
    try {
        const response = await fetch(`/admin/api/orders/${orderId}`);
        if (!response.ok) {
            throw new Error('Failed to load order details');
        }
        
        const order = await response.json();
        
        const modalContent = document.getElementById('orderDetailsContent');
        const modalFooter = document.getElementById('orderDetailsFooter');
        
        // Format dates properly - handle both createdAt and createdOn
        const orderDate = order.createdAt || order.createdOn || order.formattedDate;
        const formattedDate = orderDate ? new Date(orderDate).toLocaleString('en-IN', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            hour12: true
        }) : 'N/A';
        
        // Generate return items details if they exist
        let returnItemsHtml = '';
        if (order.returnItems && order.returnItems.length > 0) {
            returnItemsHtml = `
                <div class="return-items-section">
                    <h6><strong>Return Items:</strong></h6>
                    ${order.returnItems.map((item, index) => {
                        const itemId = generateReturnItemId(order._id, index);
                        return `
                            <div class="return-item-detail">
                                <strong>Item ID:</strong> ${itemId}<br>
                                <strong>Product:</strong> ${item.name || 'Product'}<br>
                                <strong>Reason:</strong> ${item.reason || 'Not specified'}<br>
                                <strong>Priority:</strong> <span class="badge bg-${item.priority === 'high' ? 'danger' : 'secondary'}">${item.priority || 'normal'}</span>
                                ${item.quantity ? `<br><strong>Quantity:</strong> ${item.quantity}` : ''}
                            </div>
                        `;
                    }).join('')}
                </div>
            `;
        }
        
        modalContent.innerHTML = `
            <div class="order-details">
                <p><strong>Order ID:</strong> ${order._id}</p>
                <p><strong>Date:</strong> ${formattedDate}</p>
                <p><strong>Status:</strong> <span class="badge bg-${order.status === 'Delivered' ? 'success' : order.status === 'Cancelled' || order.status === 'Returned' ? 'danger' : order.status === 'Out for Delivery' ? 'info' : 'warning'}">${order.status}</span></p>
                <p><strong>Total Amount:</strong> ₹${order.totalPrice ? order.totalPrice.toFixed(2) : '0.00'}</p>
                ${returnItemsHtml}
                ${order.status === 'Delivered' ? 
                    `<p><strong>Delivered On:</strong> ${new Date(order.updatedAt).toLocaleString('en-IN', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit',
                        hour12: true
                    })}</p>` :
                    order.status === 'Shipped' ?
                    `<p><strong>Status:</strong> Order has been shipped and is in transit</p>` :
                    order.status === 'Out for Delivery' ?
                    `<p><strong>Status:</strong> Order is out for delivery</p>` :
                    order.estimatedDeliveryDate ?
                    `<p><strong>Estimated Delivery:</strong> ${new Date(order.estimatedDeliveryDate).toLocaleString('en-IN', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit',
                        hour12: true
                    })}</p>` : ''
                }
            </div>
        `;

        // Update footer based on order status
        modalFooter.innerHTML = `
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        `;
        
        if (order.status === 'Return Request') {
            modalFooter.innerHTML += `
                <button type="button" class="btn btn-success" onclick="handleReturnRequest('${order._id}', 'accept')">
                    Accept Return
                </button>
                <button type="button" class="btn btn-danger" onclick="handleReturnRequest('${order._id}', 'reject')">
                    Reject Return
                </button>
            `;
        } else if (order.status === 'Processing' || order.status === 'Pending') {
            modalFooter.innerHTML += `
                <button type="button" class="btn btn-primary" onclick="updateOrderStatus('${order._id}', 'Shipped')">
                    Mark as Shipped
                </button>
            `;
        } else if (order.status === 'Shipped') {
            modalFooter.innerHTML += `
                <button type="button" class="btn btn-primary" onclick="updateOrderStatus('${order._id}', 'Out for Delivery')">
                    Mark as Out for Delivery
                </button>
            `;
        } else if (order.status === 'Out for Delivery') {
            modalFooter.innerHTML += `
                <button type="button" class="btn btn-success" onclick="updateOrderStatus('${order._id}', 'Delivered')">
                    Mark as Delivered
                </button>
            `;
        }
        
        // Open the modal
        const orderDetailsModal = document.getElementById('orderDetailsModal');
        const modalInstance = new bootstrap.Modal(orderDetailsModal);
        modalInstance.show();
    } catch (error) {
        console.error('Error loading order details:', error);
        showToast('Error loading order details. Please try again.', 'error');
    }
}

// Update URL with current filters
function updateURL() {
    const url = new URL(window.location);
    url.searchParams.set('page', currentPage);
    url.searchParams.set('status', statusFilter);
    url.searchParams.set('search', searchQuery);
    url.searchParams.set('sortBy', sortBy);
    url.searchParams.set('limit', pageSize);
    window.history.replaceState({}, '', url);
}

// Initialize page
document.addEventListener('DOMContentLoaded', () => {
    // Always start on page 1 for initial load and ensure URL reflects it
    currentPage = 1;
    sortBy = 'createdAt'; // Set default sort to date
    document.getElementById('sortBy').value = 'createdAt';
    
    // Get initial values from URL for filters (excluding page, as we want to force page 1)
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('status')) {
        statusFilter = urlParams.get('status');
        document.getElementById('statusFilter').value = statusFilter;
    }
    if (urlParams.has('search')) {
        searchQuery = urlParams.get('search');
        document.getElementById('searchInput').value = searchQuery;
    }
    if (urlParams.has('sortBy')) {
        sortBy = urlParams.get('sortBy');
        document.getElementById('sortBy').value = sortBy;
    }
    if (urlParams.has('limit')) {
        pageSize = urlParams.get('limit');
        document.getElementById('pageSize').value = pageSize;
    }
    
    // Load initial page with current filters (which will be page 1 by default)
    loadOrders(currentPage);
    
    // Update URL to ensure 'page=1' is reflected in the address bar
    updateURL();
    
    // Add event listener for search form
    document.getElementById('searchForm').addEventListener('submit', (e) => {
        e.preventDefault();
        currentPage = 1; // Reset to first page on new search
        updateURL();
        loadOrders(currentPage);
    });
    
    // Add event listener for status filter change
    document.getElementById('statusFilter').addEventListener('change', () => {
        currentPage = 1; // Reset to first page on filter change
        updateURL();
        loadOrders(currentPage);
    });
    
    // Add event listener for sort by change
    document.getElementById('sortBy').addEventListener('change', () => {
        currentPage = 1; // Reset to first page on sort change
        updateURL();
        loadOrders(currentPage);
    });
    
    // Add event listener for page size change
    document.getElementById('pageSize').addEventListener('change', () => {
        currentPage = 1; // Reset to first page when changing page size
        updateURL();
        loadOrders(currentPage);
    });
    
    // Add event listener for pagination
    document.getElementById('pagination').addEventListener('click', (e) => {
        e.preventDefault();
        if (e.target.classList.contains('page-link') && !e.target.parentElement.classList.contains('disabled')) {
            const page = parseInt(e.target.dataset.page);
            if (!isNaN(page)) {
                currentPage = page;
                updateURL();
                loadOrders(page);
            }
        }
    });
    
    // Add event listener for status change
    document.getElementById('ordersTableBody').addEventListener('change', (e) => {
        if (e.target.classList.contains('status-select')) {
            const orderId = e.target.dataset.orderId;
            const newStatus = e.target.value;
            updateOrderStatus(orderId, newStatus);
        }
    });
    
    // Add event listener for view details button
    document.getElementById('ordersTableBody').addEventListener('click', (e) => {
        if (e.target.classList.contains('view-details')) {
            const orderId = e.target.dataset.orderId;
            loadOrderDetails(orderId);
        }
        
        // Handle return request button
        if (e.target.classList.contains('handle-return')) {
            currentOrderId = e.target.dataset.orderId;
            document.getElementById('returnReason').value = '';
            document.getElementById('returnAction').value = 'accept';
            new bootstrap.Modal(document.getElementById('returnRequestModal')).show();
        }
    });
    
    // Add event listener for return request form
    document.getElementById('returnRequestForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (isUpdating) return;
        isUpdating = true;
        
        const action = document.getElementById('returnAction').value;
        const refundAmount = document.getElementById('refundAmount').value;
        const rejectReason = document.getElementById('rejectReason')?.value;
        
        if (action === 'accept' && (!refundAmount || refundAmount <= 0)) {
            showToast('Please enter a valid refund amount', 'error');
            isUpdating = false;
            return;
        }
        
        if (action === 'reject' && (!rejectReason || rejectReason.trim() === '')) {
            showToast('Please provide a reason for rejection', 'error');
            isUpdating = false;
            return;
        }
        
        try {
            const response = await fetch(`/admin/api/orders/${currentOrderId}/return`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ 
                    action,
                    refundAmount: action === 'accept' ? parseFloat(refundAmount) : 0,
                    rejectReason: action === 'reject' ? rejectReason.trim() : undefined
                })
            });
            
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Failed to process return request');
            }
            
            // Close modal and show success message
            bootstrap.Modal.getInstance(document.getElementById('returnRequestModal')).hide();
            showToast('Return request processed successfully');
            
            // Refresh the current page
            await loadOrders(currentPage);
            
        } catch (error) {
            console.error('Error processing return request:', error);
            showToast(error.message || 'Error processing return request', 'error');
        } finally {
            isUpdating = false;
        }
    });
});
</script>

<%- include("../../views/partials/admin/footer") %>

<!-- Add this just before the closing body tag -->
<div class="toast-container" style="position: fixed; top: 20px; right: 20px; z-index: 9999;"></div>