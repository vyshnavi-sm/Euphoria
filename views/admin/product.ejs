<%- include("../../views/partials/admin/header") %>

<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

    <style>
       body {
    font-family: 'Poppins', sans-serif;
    background-color: #f8f9fa;
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    padding: 30px -1px 60px 80px; /* perfect spacing */
}


        .add-product-container {
            display: flex;
            justify-content: flex-end;
            margin-bottom: 30px;
            width: 90%;
        }

        .btn-success {
            padding: 10px 15px;
            font-size: 16px;
            border-radius: 5px;
            text-decoration: none;
            transition: transform 0.2s ease-in-out;
            background-color: #28a745;
            color: white;
        }

        .btn-success:hover {
            transform: scale(1.05);
        }

        .table-container {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
    width: 90%;
    max-width: 1200px;
    opacity: 0;
    transform: translateY(-50px);
    animation: slideDown 0.6s ease-out forwards;
    margin-top: 130px;  /* ðŸ‘ˆ Add this */
    margin-bottom: 50px;
    margin-right: 40px;
}


        @keyframes slideDown {
            from {
                opacity: 0;
                transform: translateY(-50px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background: white;
        }

        th, td {
            padding: 12px;
            text-align: center;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #5c3d2e;
            color: white;
        }

        tr:hover {
            background-color: #f5f5f5;
        }

        .btn {
            padding: 6px 10px;
            border-radius: 5px;
            text-decoration: none;
            font-weight: bold;
            display: inline-block;
            text-align: center;
            font-size: 14px;
            transition: transform 0.2s ease-in-out;
        }

        .btn-offer {
    background-color: #a8e6a1; /* light green */
    color: #155724;
    padding: 4px 8px;
    font-size: 13px;
}

.btn-remove {
    background-color: #f8b8b8; /* light red */
    color: #721c24;
    padding: 4px 8px;
    font-size: 13px;
}


        .btn-info {
            background-color: #20c997;
            color: white;
        }

        .btn-danger {
            background-color: #dc3545;
            color: white;
        }

        .btn:hover {
            opacity: 0.8;
            transform: scale(1.05);
        }

        .btn a {
            color: white;
            text-decoration: none;
        }

        .pagination-container {
            width: 90%;
            text-align: center;
            margin-top: 20px;
            opacity: 0;
            transform: translateY(-20px);
            animation: slideDown 0.8s ease-out forwards;
        }

        .pagination .page-item {
            display: inline-block;
            margin: 5px;
        }

        .pagination .page-link {
            padding: 8px 12px;
            border-radius: 5px;
            background-color: #5c3d2e;
            color: white;
            border: none;
            cursor: pointer;
        }

        .pagination .page-link:hover {
            background-color: #4a2f21;
        }

        .search-container {
            flex: 1;
            max-width: 400px;
            margin-right: 20px;
        }

        .search-input {
            border-radius: 5px;
            border: 1px solid #ddd;
            padding: 8px 15px;
            font-size: 14px;
        }

        .search-btn {
            background-color: #5c3d2e;
            color: white;
            border: none;
            padding: 8px 20px;
            border-radius: 5px;
            transition: all 0.3s ease;
        }

        .search-btn:hover {
            background-color: #4a2f21;
            color: white;
            transform: translateY(-1px);
        }

        .clear-btn {
            background-color: #dc3545;
            color: white;
            border: none;
            padding: 8px 20px;
            border-radius: 5px;
            transition: all 0.3s ease;
            text-decoration: none;
        }

        .clear-btn:hover {
            background-color: #c82333;
            color: white;
            transform: translateY(-1px);
        }

        .status-cancelled {
            background-color: #FFEBEE;
            color: #C62828;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 13px;
        }

        .product-row-cancelled {
            background-color: #FFF5F5 !important;
        }
      
    </style>
</head>

<!-- Table -->
<div class="table-container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="search-container">
            <form action="/admin/products" method="GET" class="d-flex">
                <input type="text" name="search" class="form-control search-input" placeholder="Search products..." value="<%= search || '' %>">
                <button type="submit" class="btn search-btn ms-2">
                    <i class="fas fa-search"></i> Search
                </button>
                <% if (search) { %>
                    <a href="/admin/products" class="btn clear-btn ms-2">
                        <i class="fas fa-times"></i> Clear
                    </a>
                <% } %>
            </form>
        </div>
        <a href="/admin/addProducts" class="btn btn-success" style="background-color: #5c3d2e; border-color: #5c3d2e;">+ Add Product</a>
    </div>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Brand</th>
                <th>Category</th>
                <th>Regular Price</th>
                <th>Sale Price</th>
                <th>Quantity</th>
                <th>Offer</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            <% if (pro && pro.length > 0) { %>
                <% pro.forEach((product) => { %>
                    <tr class="<%= product.status === 'Cancelled' ? 'product-row-cancelled' : '' %>" data-product-id="<%= product._id %>">
                        <td>
                            <%= product.productName %>
                            <% if (product.status === 'Cancelled') { %>
                                <span class="status-cancelled ms-2">Cancelled</span>
                            <% } %>
                        </td>
                        <td><%= product.brand ? product.brand.brandName : 'N/A' %></td>
                        <td><%= product.category ? product.category.name : 'N/A' %></td>
                        <td>â‚¹<%= product.regularPrice %></td>
                        <td>â‚¹<%= product.salePrice %></td>
                        <td><%= product.quantity %></td>
                        <td>
                            <% if (product.offerDiscount > 0) { %>
                                <span class="badge bg-success"><%= product.offerDiscount %>% OFF</span>
                                <button onclick="removeOffer('<%= product._id %>')" class="btn btn-sm btn-remove">
                                    <i class="fas fa-times"></i> Remove
                                </button>
                            <% } else { %>
                                <button onclick="showOfferModal('<%= product._id %>', '<%= product.productName %>')" class="btn btn-sm btn-offer">
                                    <i class="fas fa-tag"></i> Add Offer
                                </button>
                            <% } %>
                        </td>
                        <td>
                            <% if (product.isBlocked) { %>
                                <span class="badge bg-danger">Blocked</span>
                            <% } else if (product.quantity === 0) { %>
                                <span class="badge bg-warning">Out of Stock</span>
                            <% } else { %>
                                <span class="badge bg-success">Active</span>
                            <% } %>
                        </td>
                        <td>
                            <div class="btn-group">
                                <a href="/admin/editProduct?id=<%= product._id %>" class="btn btn-sm btn-primary">
                                    <i class="fas fa-edit"></i> Edit
                                </a>
                                <% if (product.isBlocked) { %>
                                    <button onclick="unblockProduct('<%= product._id %>')" class="btn btn-sm btn-success">
                                        <i class="fas fa-unlock"></i> Unblock
                                    </button>
                                <% } else { %>
                                    <button onclick="blockProduct('<%= product._id %>')" class="btn btn-sm btn-danger">
                                        <i class="fas fa-ban"></i> Block
                                    </button>
                                <% } %>
                            </div>
                        </td>
                    </tr>
                <% }) %>
            <% } else { %>
                <tr>
                    <td colspan="9" class="text-center">No products found</td>
                </tr>
            <% } %>
        </tbody>
    </table>
</div>

<!-- Pagination -->
<div class="pagination-container">
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <% if (currentPage > 1) { %>
                <li class="page-item">
                    <a class="page-link" href="/admin/products?page=<%= currentPage - 1 %>&search=<%= search %>">Previous</a>
                </li>
            <% } %>
            <% for (let i = 1; i <= totalPages; i++) { %>
                <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                    <a class="page-link" href="/admin/products?page=<%= i %>&search=<%= search %>"><%= i %></a>
                </li>
            <% } %>
            <% if (currentPage < totalPages) { %>
                <li class="page-item">
                    <a class="page-link" href="/admin/products?page=<%= currentPage + 1 %>&search=<%= search %>">Next</a>
                </li>
            <% } %>
        </ul>
    </nav>
</div>

<!-- Offer Modal -->
<div class="modal fade" id="offerModal" tabindex="-1" aria-labelledby="offerModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="offerModalLabel">Add Offer</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="offerForm">
                    <input type="hidden" id="productId" name="productId">
                    <div class="mb-3">
                        <label for="productName" class="form-label">Product</label>
                        <input type="text" class="form-control" id="productName" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="discountPercentage" class="form-label">Discount Percentage</label>
                        <input type="number" class="form-control" id="discountPercentage" name="discountPercentage" min="0" max="100" required>
                    </div>
                    <div class="mb-3">
                        <label for="startDate" class="form-label">Start Date</label>
                        <input type="datetime-local" class="form-control" id="startDate" name="startDate" required>
                    </div>
                    <div class="mb-3">
                        <label for="endDate" class="form-label">End Date</label>
                        <input type="datetime-local" class="form-control" id="endDate" name="endDate" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="applyOffer()">Apply Offer</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

<script>
    // Show success/error messages from URL parameters
    document.addEventListener('DOMContentLoaded', function() {
        const urlParams = new URLSearchParams(window.location.search);
        const successMessage = urlParams.get('success');
        const errorMessage = urlParams.get('error');

        if (successMessage) {
            showToast(successMessage, 'success');
        }
        if (errorMessage) {
            showToast(errorMessage, 'error');
        }
    });

    function showToast(message, type = 'success') {
        const toast = document.createElement('div');
        toast.className = `toast align-items-center text-white bg-${type} border-0`;
        toast.setAttribute('role', 'alert');
        toast.setAttribute('aria-live', 'assertive');
        toast.setAttribute('aria-atomic', 'true');
        
        toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">
                    ${message}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        `;
        
        const toastContainer = document.getElementById('toastContainer') || createToastContainer();
        toastContainer.appendChild(toast);
        
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();
        
        toast.addEventListener('hidden.bs.toast', () => {
            toast.remove();
        });
    }

    function createToastContainer() {
        const container = document.createElement('div');
        container.id = 'toastContainer';
        container.className = 'toast-container position-fixed bottom-0 end-0 p-3';
        document.body.appendChild(container);
        return container;
    }

    function showOfferModal(productId, productName) {
        document.getElementById('productId').value = productId;
        document.getElementById('productName').value = productName;
        const modal = new bootstrap.Modal(document.getElementById('offerModal'));
        modal.show();
    }

    async function applyOffer() {
        const form = document.getElementById('offerForm');
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch('/admin/products/applyOffer', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();
            
            if (result.success) {
                // Update the sale price in the table without reloading
                const row = document.querySelector(`tr[data-product-id="${data.productId}"]`);
                if (row) {
                    const salePriceCell = row.querySelector('td:nth-child(5)');
                    if (salePriceCell) {
                        salePriceCell.textContent = `â‚¹${result.newSalePrice}`;
                    }
                    
                    // Update the offer cell to show "Remove" button
                    const offerCell = row.querySelector('td:nth-child(7)');
                    if (offerCell) {
                        const productName = row.querySelector('td:nth-child(1)').textContent.trim();
                        offerCell.innerHTML = `
                            <span class="badge bg-success">${result.discountPercentage}% OFF</span>
                            <button onclick="removeOffer('${data.productId}')" class="btn btn-sm btn-remove">
                                <i class="fas fa-times"></i> Remove
                            </button>
                        `;
                    }
                }
                showToast(result.message, 'success');
                // Close the modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('offerModal'));
                modal.hide();
            } else {
                showToast(result.message, 'error');
            }
        } catch (error) {
            console.error('Error applying offer:', error);
            showToast('Error applying offer', 'error');
        }
    }

    async function removeOffer(productId) {
        if (!confirm('Are you sure you want to remove this offer?')) {
            return;
        }

        try {
            const response = await fetch('/admin/products/removeOffer', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ productId })
            });

            const result = await response.json();
            
            if (result.success) {
                // Update the sale price in the table without reloading
                const row = document.querySelector(`tr[data-product-id="${productId}"]`);
                if (row) {
                    const salePriceCell = row.querySelector('td:nth-child(5)');
                    if (salePriceCell) {
                        salePriceCell.textContent = `â‚¹${result.newSalePrice}`;
                    }
                    
                    // Update the offer cell to show "Add Offer" button
                    const offerCell = row.querySelector('td:nth-child(7)');
                    if (offerCell) {
                        const productName = row.querySelector('td:nth-child(1)').textContent.trim();
                        offerCell.innerHTML = `
                            <button onclick="showOfferModal('${productId}', '${productName}')" class="btn btn-sm btn-offer">
                                <i class="fas fa-tag"></i> Add Offer
                            </button>
                        `;
                    }
                }
                showToast(result.message, 'success');
            } else {
                showToast(result.message, 'error');
            }
        } catch (error) {
            console.error('Error removing offer:', error);
            showToast('Error removing offer', 'error');
        }
    }

    async function blockProduct(productId) {
        if (!confirm('Are you sure you want to block this product? It will be removed from all user carts.')) {
            return;
        }

        try {
            const response = await fetch('/admin/products/blockProduct', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ productId })
            });

            const result = await response.json();
            
            if (result.success) {
                // Update the status badge
                const row = document.querySelector(`tr[data-product-id="${productId}"]`);
                if (row) {
                    const statusCell = row.querySelector('td:nth-child(8)');
                    if (statusCell) {
                        statusCell.innerHTML = '<span class="badge bg-danger">Blocked</span>';
                    }
                    
                    // Update the action buttons
                    const actionCell = row.querySelector('td:nth-child(9)');
                    if (actionCell) {
                        actionCell.innerHTML = `
                            <div class="btn-group">
                                <a href="/admin/editProduct?id=${productId}" class="btn btn-sm btn-primary">
                                    <i class="fas fa-edit"></i> Edit
                                </a>
                                <button onclick="unblockProduct('${productId}')" class="btn btn-sm btn-success">
                                    <i class="fas fa-unlock"></i> Unblock
                                </button>
                            </div>
                        `;
                    }
                }
                showToast(result.message, 'success');
            } else {
                showToast(result.message, 'error');
            }
        } catch (error) {
            console.error('Error blocking product:', error);
            showToast('Error blocking product', 'error');
        }
    }

    async function unblockProduct(productId) {
        if (!confirm('Are you sure you want to unblock this product?')) {
            return;
        }

        try {
            const response = await fetch('/admin/products/unblockProduct', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ productId })
            });

            const result = await response.json();
            
            if (result.success) {
                // Update the status badge
                const row = document.querySelector(`tr[data-product-id="${productId}"]`);
                if (row) {
                    const statusCell = row.querySelector('td:nth-child(8)');
                    const quantityCell = row.querySelector('td:nth-child(6)');
                    if (statusCell) {
                        // Check if product is out of stock
                        const quantity = parseInt(quantityCell.textContent);
                        if (quantity === 0) {
                            statusCell.innerHTML = '<span class="badge bg-warning">Out of Stock</span>';
                        } else {
                            statusCell.innerHTML = '<span class="badge bg-success">Active</span>';
                        }
                    }
                    
                    // Update the action buttons
                    const actionCell = row.querySelector('td:nth-child(9)');
                    if (actionCell) {
                        actionCell.innerHTML = `
                            <div class="btn-group">
                                <a href="/admin/editProduct?id=${productId}" class="btn btn-sm btn-primary">
                                    <i class="fas fa-edit"></i> Edit
                                </a>
                                <button onclick="blockProduct('${productId}')" class="btn btn-sm btn-danger">
                                    <i class="fas fa-ban"></i> Block
                                </button>
                            </div>
                        `;
                    }
                }
                showToast(result.message, 'success');
            } else {
                showToast(result.message, 'error');
            }
        } catch (error) {
            console.error('Error unblocking product:', error);
            showToast('Error unblocking product', 'error');
        }
    }
</script>

<%- include("../../views/partials/admin/footer") %>
