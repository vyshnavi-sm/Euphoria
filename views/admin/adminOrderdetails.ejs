<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Admin Order Details | Euphoria</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
  <style>
    body {
      background-color: #f7f1eb;
      font-family: 'Segoe UI', sans-serif;
    }

    .content {
      padding: 30px;
      margin-top: 60px;
    }

    .page-title {
      color: #5D4037;
      font-weight: 600;
      margin-bottom: 2rem;
      padding-bottom: 1rem;
      border-bottom: 2px solid #8B6B61;
    }

    .table thead {
      background-color: #5D4037;
      color: white;
    }

    .section-header {
      background-color: #5D4037;
      color: white;
      padding: 10px;
      border-radius: 5px;
      margin-top: 30px;
    }

    .badge {
      padding: 8px 12px;
      font-weight: 500;
    }

    .badge.bg-success {
      background-color: #8B6B61 !important;
    }

    .badge.bg-warning {
      background-color: #A1887F !important;
      color: white;
    }

    .badge.bg-danger {
      background-color: #5D4037 !important;
    }

    .badge.bg-info {
      background-color: #6B4E3D !important;
      color: white;
    }

    .status-section {
      background-color: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 2px 4px rgba(93, 64, 55, 0.1);
      margin-bottom: 20px;
    }

    .action-buttons {
      margin-top: 15px;
    }

    .action-buttons .btn {
      margin-right: 10px;
    }

    .btn-primary {
      background-color: #5D4037;
      border-color: #5D4037;
    }

    .btn-primary:hover {
      background-color: #8B6B61;
      border-color: #8B6B61;
    }

    .btn-success {
      background-color: #8B6B61;
      border-color: #8B6B61;
    }

    .btn-success:hover {
      background-color: #A1887F;
      border-color: #A1887F;
    }

    .btn-danger {
      background-color: #5D4037;
      border-color: #5D4037;
    }

    .btn-danger:hover {
      background-color: #8B6B61;
      border-color: #8B6B61;
    }

    .form-select:focus {
      border-color: #8B6B61;
      box-shadow: 0 0 0 0.25rem rgba(139, 107, 97, 0.25);
    }

    .toast-container {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 9999;
    }

    /* New styles for item return actions */
    .return-action-indicator {
        cursor: pointer;
        margin-left: 5px;
        font-size: 1.1em;
        color: #5D4037;
    }

    .item-return-actions {
        display: flex;
        gap: 5px;
        margin-top: 5px;
    }

    /* Delivery charge styling */
    .delivery-charge-info {
      color: #6B4E3D;
      font-size: 0.9em;
      margin-top: 5px;
    }

    .free-delivery {
      color: #8B6B61;
      font-weight: 500;
    }
  </style>
</head>
<body>

  <div class="content flex-grow-1">
    <h2 class="page-title">Order Details</h2>

    <!-- Status Management Section -->
    <div class="status-section">
      <div class="row align-items-center">
        <div class="col-md-6">
          <h5>Order Status</h5>
          <select class="form-select" id="orderStatus">
            <option value="Pending" <%= order.status === 'Pending' ? 'selected' : '' %>>Pending</option>
            <option value="Processing" <%= order.status === 'Processing' ? 'selected' : '' %>>Processing</option>
            <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
            <option value="Out for Delivery" <%= order.status === 'Out for Delivery' ? 'selected' : '' %>>Out for Delivery</option>
            <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
            <option value="Payment Failed" <%= order.status === 'Payment Failed' ? 'selected' : '' %>>Payment Failed</option>
            <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
            <option value="Return Request" <%= order.status === 'Return Request' ? 'selected' : '' %>>Return Request</option>
            <option value="Returned" <%= order.status === 'Returned' ? 'selected' : '' %>>Returned</option>
          </select>
        </div>
        <div class="col-md-6">
          <div class="action-buttons">
            <% if (order.status === 'Pending' || order.status === 'Processing') { %>
              <button class="btn btn-primary" onclick="updateOrderStatus('<%= order._id %>', 'Shipped')">Mark as Shipped</button>
            <% } %>
            <% if (order.status === 'Shipped') { %>
              <button class="btn btn-primary" onclick="updateOrderStatus('<%= order._id %>', 'Out for Delivery')" id="outForDeliveryBtn">Mark as Out for Delivery</button>
            <% } %>
            <% if (order.status === 'Out for Delivery') { %>
              <button class="btn btn-success" onclick="updateOrderStatus('<%= order._id %>', 'Delivered')">Mark as Delivered</button>
            <% } %>
            <% if (order.status === 'Return Request') { %>
              <button class="btn btn-success" onclick="handleReturnRequest('<%= order._id %>', 'accept')">Accept Return</button>
              <button class="btn btn-danger" onclick="handleReturnRequest('<%= order._id %>', 'reject')">Reject Return</button>
            <% } %>
          </div>
        </div>
      </div>
    </div>

    <p><strong>Order ID:</strong> <%= order._id %></p>
    <p><strong>Date:</strong> <%= new Date(order.createdOn).toLocaleString('en-IN', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        hour12: true
    }) %></p>
    <p><strong>Payment Method:</strong> <%= order.paymentMethod %></p>
    <p><strong>Current Status:</strong> <span class="badge bg-<%= order.statusBadgeClass %>"><%= order.status %></span></p>
    <% if (order.status === 'Delivered') { %>
        <% const deliveredDate = new Date(order.statusUpdatedAt); %>
        <% if (!isNaN(deliveredDate.getTime())) { %>
            <p><strong>Delivered On:</strong> <%= deliveredDate.toLocaleString('en-IN', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                hour12: true
            }) %></p>
        <% } %>
    <% } else if (order.status === 'Shipped') { %>
        <p><strong>Status:</strong> Order has been shipped and is in transit</p>
    <% } else if (order.status === 'Out for Delivery') { %>
        <p><strong>Status:</strong> Order is out for delivery</p>
    <% } else if (['Pending', 'Processing'].includes(order.status)) { %>
        <p><strong>Estimated Delivery:</strong> <%= new Date(order.estimatedDeliveryDate).toLocaleString('en-IN', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            hour12: true
        }) %></p>
    <% } %>

    <div class="section-header">Product Details</div>
    <table class="table table-bordered mt-2">
      <thead>
        <tr>
          <th>Product Name</th>
          <th>Status</th>
          <th>Unit Price</th>
          <th>Qty</th>
          <th>Subtotal</th>
        </tr>
      </thead>
      <tbody>
        <% order.orderedItems.forEach(item => { %>
          <tr>
            <td><%= item.product.productName %></td>
            <td>
              <span class="badge bg-<%= item.statusBadgeClass %>"><%= item.status %></span>
              <% if (item.status === 'Return Requested' || item.returnRequested) { %>
                <span class="return-action-indicator" data-item-id="<%= item._id %>">&#9432;</span>
                <div class="item-return-actions" id="itemActions-<%= item._id %>" style="display: none;">
                  <button class="btn btn-success btn-sm" onclick="showItemReturnModal('<%= order._id %>', '<%= item._id %>', 'accept')">Accept</button>
                  <button class="btn btn-danger btn-sm" onclick="showItemReturnModal('<%= order._id %>', '<%= item._id %>', 'reject')">Reject</button>
                </div>
              <% } %>
            </td>
            <td>₹<%= item.price.toFixed(2) %></td>
            <td><%= item.quantity %></td>
            <td>₹<%= (item.price * item.quantity).toFixed(2) %></td>
          </tr>
        <% }); %>
      </tbody>
      <tfoot>
        <tr>
          <td colspan="4" class="text-end"><strong>Total:</strong></td>
          <td><strong>₹<%= order.totalPrice.toFixed(2) %></strong></td>
        </tr>
      </tfoot>
    </table>

    <script id="order-data" type="application/json">
      <%- JSON.stringify(order) %>
    </script>

    <div class="section-header mt-4">Order Summary</div>
    <div class="card">
      <div class="card-body p-3">
        <div class="row">
          <div class="col-md-4">
            <p class="mb-2"><strong>Subtotal:</strong> ₹<%= order.totalPrice.toFixed(2) %></p>
            <p class="mb-2"><strong>Delivery Charge:</strong> ₹<%= order.deliveryCharge.toFixed(2) %></p>
            <p class="mb-2"><strong>Tax (18%):</strong> ₹<%= (order.finalAmount - (order.totalPrice + order.deliveryCharge - order.discount)).toFixed(2) %></p>
            <% if (order.discount > 0) { %>
              <p class="mb-2"><strong>Discount:</strong> -₹<%= order.discount.toFixed(2) %></p>
            <% } %>
            <hr class="my-2">
            <p class="h6 mt-2 mb-0"><strong>Final Amount:</strong> ₹<%= order.finalAmount.toFixed(2) %></p>
          </div>
        </div>
      </div>
    </div>

    <% if (order.returnItems && order.returnItems.length > 0) { %>
        <div class="return-items-section">
            <h6><strong>Return Items:</strong></h6>
            <% order.returnItems.forEach((item, index) => { %>
                <div class="return-item-detail">
                    <strong>Return ID:</strong> RET-<%= order._id.slice(-6) %>-<%= String(index + 1).padStart(2, '0') %><br>
                    <strong>Product:</strong> <%= item.name || 'Product' %><br>
                    <strong>Reason:</strong> <%= item.reason || 'Not specified' %><br>
                    <strong>Priority:</strong> <span class="badge bg-<%= item.priority === 'high' ? 'danger' : 'secondary' %>"><%= item.priority || 'normal' %></span>
                    <% if (item.quantity) { %>
                        <br><strong>Quantity:</strong> <%= item.quantity %>
                    <% } %>
                </div>
            <% }); %>
        </div>
    <% } %>

    <div class="section-header">Customer Details</div>
    <p>
      <strong>Name:</strong> <%= order.userId.name %><br>
      <strong>Email:</strong> <%= order.userId.email %><br>
      <strong>Phone:</strong> <%= order.userId.phone %>
    </p>

    <div class="section-header">Shipping Address</div>
    <p>
      <% if (order.address) { %>
        <%= order.address.name %><br>
        <%= order.address.address %><br>
        <%= order.address.city %>, <%= order.address.state %><br>
        <%= order.address.pincode %>
      <% } else if (order.addressDetails) { %>
        <%= order.addressDetails.name %><br>
        <%= order.addressDetails.address %><br>
        <%= order.addressDetails.city %>, <%= order.addressDetails.state %><br>
        <%= order.addressDetails.pincode %>
      <% } else { %>
        No shipping address available
      <% } %>
    </p>

    <% if (order.status === 'Return Request') { %>
      <div class="section-header">Return Request Details</div>
      <p>
        <strong>Reason:</strong> <%= order.returnReason || 'Not specified' %><br>
        <strong>Requested On:</strong> <%= order.returnRequestDate ? new Date(order.returnRequestDate).toLocaleString() : 'N/A' %>
      </p>
    <% } %>

    <% if (order.status === 'Cancelled') { %>
      <div class="section-header">Cancellation Details</div>
      <p>
        <strong>Reason:</strong> <%= order.cancellationReason || 'Not specified' %>
      </p>
    <% } %>
  </div>

  <!-- Return Request Modal -->
  <div class="modal fade" id="returnRequestModal" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Handle Return Request</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <!-- Refund breakdown for full order return -->
          <div id="orderRefundBreakdown" class="mb-3" style="display: none;">
            <div><strong>Subtotal:</strong> ₹<span id="orderBreakdownSubtotal"></span></div>
            <div><strong>Tax:</strong> ₹<span id="orderBreakdownTax"></span></div>
            <div><strong>Discount:</strong> -₹<span id="orderBreakdownDiscount"></span></div>
            <hr class="my-2">
            <div><strong>Final Refund Amount:</strong> ₹<span id="orderBreakdownFinal"></span></div>
          </div>
          <form id="returnRequestForm">
            <input type="hidden" id="returnActionInput" name="action">
            <div class="mb-3" id="refundAmountSection" style="display: none;">
              <label class="form-label">Refund Amount (₹)</label>
              <input type="number" class="form-control" id="refundAmount" step="0.01" required>
              <small class="text-muted">This amount will be credited to the user's wallet</small>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Item Return Request Modal -->
  <div class="modal fade" id="itemReturnModal" tabindex="-1" aria-labelledby="itemReturnModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="itemReturnModalLabel">Handle Item Return Request</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <!-- Refund breakdown for item return -->
          <div id="itemRefundBreakdown" class="mb-3" style="display: none;">
            <div><strong>Subtotal:</strong> ₹<span id="itemBreakdownSubtotal"></span></div>
            <div><strong>Tax:</strong> ₹<span id="itemBreakdownTax"></span></div>
            <div><strong>Discount:</strong> -₹<span id="itemBreakdownDiscount"></span></div>
            <hr class="my-2">
            <div><strong>Final Refund Amount:</strong> ₹<span id="itemBreakdownFinal"></span></div>
          </div>
          <form id="itemReturnForm">
            <input type="hidden" id="itemReturnOrderId" name="orderId">
            <input type="hidden" id="itemReturnItemId" name="itemId">
            <input type="hidden" id="itemReturnAction" name="action">
            <p>Item: <strong id="itemReturnProductName"></strong></p>
            <div class="mb-3" id="itemReturnReasonSection" style="display: none;">
              <label class="form-label">Reason</label>
              <p id="itemUserReturnReason" class="form-control-static"></p>
            </div>
            <div class="mb-3" id="itemRefundAmountSection" style="display: none;">
              <label class="form-label">Refund Amount (₹)</label>
              <input type="number" class="form-control" id="itemRefundAmount" name="refundAmount" step="0.01" required>
              <small class="text-muted">This amount will be credited to the user's wallet for this item.</small>
            </div>
            <div class="mb-3" id="itemRejectReasonSection" style="display: none;">
              <label class="form-label">Rejection Reason</label>
              <textarea class="form-control" id="itemRejectReason" name="rejectReason" rows="3"></textarea>
            </div>
            <button type="submit" class="btn btn-primary">Confirm</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    let isUpdating = false;
    let currentOrderIdForReturn = null;
    let currentReturnAction = null;
    let currentItemForReturn = null;

    // Constants for delivery charge calculation
    const DELIVERY_CHARGE = 50;
    const FREE_DELIVERY_THRESHOLD = 1000;

    // Function to calculate delivery charge
    function calculateDeliveryCharge(subtotal) {
      return subtotal >= FREE_DELIVERY_THRESHOLD ? 0 : DELIVERY_CHARGE;
    }

    // Function to get appropriate badge class for status
    function getStatusBadgeClass(status) {
      switch(status) {
        case 'Delivered':
          return 'success';
        case 'Cancelled':
        case 'Returned':
        case 'Payment Failed':
          return 'danger';
        case 'Out for Delivery':
          return 'info';
        case 'Shipped':
        case 'Processing':
        case 'Pending':
        case 'Return Request':
        default:
          return 'warning';
      }
    }

    // Function to show toast notifications
    function showToast(message, type = 'success') {
      const toastContainer = document.querySelector('.toast-container');
      const toast = document.createElement('div');
      toast.classList.add('toast', 'show', `toast-${type}`);
      toast.innerHTML = `
        <div class="toast-header">
          <strong class="me-auto">${type === 'success' ? 'Success' : 'Error'}</strong>
          <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
        </div>
        <div class="toast-body">${message}</div>
      `;
      toastContainer.appendChild(toast);
      
      setTimeout(() => {
        toast.remove();
      }, 5000);
      
      toast.querySelector('.btn-close').addEventListener('click', () => {
        toast.remove();
      });
    }

    // Function to update order status
    async function updateOrderStatus(orderId, newStatus) {
      if (isUpdating) return;
      
      isUpdating = true;
      console.log(`Attempting to update order ${orderId} status to ${newStatus}`);
      
      try {
        const response = await fetch(`/admin/api/orders/${orderId}/status`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ status: newStatus })
        });
        
        const result = await response.json();
        
        if (!response.ok) {
          throw new Error(result.message || result.error || 'Failed to update status');
        }
        
        showToast('Order status updated successfully');
        
        // Update the status badge and text immediately
        const statusBadge = document.querySelector('.badge');
        if (statusBadge) {
          statusBadge.textContent = newStatus;
          statusBadge.className = `badge bg-${getStatusBadgeClass(newStatus)}`;
          console.log(`Main status badge updated to: ${newStatus}`);
        }
        
        // Update the status dropdown
        const statusSelect = document.getElementById('orderStatus');
        if (statusSelect) {
          statusSelect.value = newStatus;
          console.log(`Status dropdown value updated to: ${newStatus}`);
        }
        
        // Update action buttons based on new status
        const actionButtons = document.querySelector('.action-buttons');
        if (actionButtons) {
          actionButtons.innerHTML = '';
          if (newStatus === 'Pending' || newStatus === 'Processing') {
            actionButtons.innerHTML = `
              <button class="btn btn-primary" onclick="updateOrderStatus('${orderId}', 'Shipped')">Mark as Shipped</button>
            `;
          } else if (newStatus === 'Shipped') {
            actionButtons.innerHTML = `
              <button class="btn btn-primary" onclick="updateOrderStatus('${orderId}', 'Out for Delivery')">Mark as Out for Delivery</button>
            `;
          } else if (newStatus === 'Out for Delivery') {
            actionButtons.innerHTML = `
              <button class="btn btn-success" onclick="updateOrderStatus('${orderId}', 'Delivered')">Mark as Delivered</button>
            `;
          } else if (newStatus === 'Return Request') {
            actionButtons.innerHTML = `
              <button class="btn btn-success" onclick="handleReturnRequest('${orderId}', 'accept')">Accept Return</button>
              <button class="btn btn-danger" onclick="handleReturnRequest('${orderId}', 'reject')">Reject Return</button>
            `;
          } 
        }
        
        // Update individual item statuses based on the new overall status
        const itemRows = document.querySelectorAll('.table.table-bordered.mt-2 tbody tr');
        itemRows.forEach(row => {
            const statusCell = row.querySelector('td:nth-child(2)');
            if (statusCell) {
                const statusBadge = statusCell.querySelector('.badge');
                if (statusBadge) {
                    const currentItemStatus = statusBadge.textContent.trim();
                    if (currentItemStatus !== 'Returned' && currentItemStatus !== 'Return Requested' && currentItemStatus !== 'Cancelled') {
                        statusBadge.textContent = newStatus;
                        statusBadge.className = `badge bg-${getStatusBadgeClass(newStatus)}`;

                        if (newStatus !== 'Return Requested') {
                             const itemActionsContainer = statusCell.querySelector('.item-return-actions');
                             if(itemActionsContainer) {
                                 itemActionsContainer.remove();
                             }
                             const indicator = statusCell.querySelector('.return-action-indicator');
                             if(indicator){
                                 indicator.remove();
                             }
                        }
                    }
                }
            }
        });
        
      } catch (error) {
        console.error('Error updating order status:', error);
        showToast(error.message || 'Error updating order status', 'error');
        
        // Reset the status dropdown to the previous value
        const statusSelect = document.getElementById('orderStatus');
        if (statusSelect) {
          statusSelect.value = '<%= order.status %>';
        }
      } finally {
        isUpdating = false;
      }
    }

    // Function to handle return request
    function handleReturnRequest(orderId, action) {
      const modal = new bootstrap.Modal(document.getElementById('returnRequestModal'));
      currentOrderIdForReturn = orderId;
      currentReturnAction = action;
      document.getElementById('returnActionInput').value = action;

      const refundSection = document.getElementById('refundAmountSection');
      const refundInput = document.getElementById('refundAmount');
      const breakdown = document.getElementById('orderRefundBreakdown');
      const order = JSON.parse(document.getElementById('order-data').textContent);

      if (action === 'accept') {
        refundSection.style.display = 'block';
        refundInput.required = true;
        refundInput.value = order.finalAmount || 0;
        // Show breakdown
        breakdown.style.display = 'block';
        // Calculate values
        const subtotal = order.orderedItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
        const deliveryCharge = order.deliveryCharge || 0;
        const discount = order.discount || 0;
        const tax = (order.finalAmount - (order.totalPrice + deliveryCharge - discount));
        document.getElementById('orderBreakdownSubtotal').textContent = subtotal.toFixed(2);
        document.getElementById('orderBreakdownTax').textContent = tax > 0 ? tax.toFixed(2) : '0.00';
        document.getElementById('orderBreakdownDiscount').textContent = discount.toFixed(2);
        document.getElementById('orderBreakdownFinal').textContent = order.finalAmount ? order.finalAmount.toFixed(2) : '0.00';
      } else {
        refundSection.style.display = 'none';
        refundInput.required = false;
        refundInput.value = '';
        breakdown.style.display = 'none';
      }

      modal.show();
    }

    // Function to show item return modal
    function showItemReturnModal(orderId, itemId, action) {
      const modal = new bootstrap.Modal(document.getElementById('itemReturnModal'));
      document.getElementById('itemReturnOrderId').value = orderId;
      document.getElementById('itemReturnItemId').value = itemId;
      document.getElementById('itemReturnAction').value = action;
      currentItemForReturn = itemId;
      const refundSection = document.getElementById('itemRefundAmountSection');
      const refundInput = document.getElementById('itemRefundAmount');
      const userReasonSection = document.getElementById('itemReturnReasonSection');
      const userReasonText = document.getElementById('itemUserReturnReason');
      const rejectReasonSection = document.getElementById('itemRejectReasonSection');
      const rejectReasonInput = document.getElementById('itemRejectReason');
      const breakdown = document.getElementById('itemRefundBreakdown');
      refundSection.style.display = 'none';
      refundInput.required = false;
      userReasonSection.style.display = 'none';
      rejectReasonSection.style.display = 'none';
      rejectReasonInput.required = false;
      rejectReasonInput.value = '';
      userReasonText.textContent = '';
      breakdown.style.display = 'none';
      const order = JSON.parse(document.getElementById('order-data').textContent);
      const item = order.orderedItems.find(item => item._id === itemId);
      if (item && item.status === 'Return Requested') {
        userReasonSection.style.display = 'block';
        userReasonText.textContent = item.returnReason || 'No reason provided';
      }
      if (action === 'accept') {
        refundSection.style.display = 'block';
        refundInput.required = true;
        if (item) {
          // Use proportional values if available
          const subtotal = (item.price * item.quantity) || 0;
          const discount = item.proportionalDiscount || 0;
          const tax = item.proportionalTax || 0;
          const finalRefund = subtotal + tax - discount;
          refundInput.value = finalRefund.toFixed(2);
          // Show breakdown
          breakdown.style.display = 'block';
          document.getElementById('itemBreakdownSubtotal').textContent = subtotal.toFixed(2);
          document.getElementById('itemBreakdownTax').textContent = tax.toFixed(2);
          document.getElementById('itemBreakdownDiscount').textContent = discount.toFixed(2);
          document.getElementById('itemBreakdownFinal').textContent = finalRefund.toFixed(2);
        } else {
          refundInput.value = 0;
          breakdown.style.display = 'none';
        }
      } else if (action === 'reject') {
        rejectReasonSection.style.display = 'block';
        rejectReasonInput.required = true;
      }
      if (item && item.product && item.product.productName) {
        document.getElementById('itemReturnProductName').textContent = item.product.productName;
      } else {
        document.getElementById('itemReturnProductName').textContent = 'Item Details Not Found';
      }
      modal.show();
    }

    // Event Listeners
    document.addEventListener('DOMContentLoaded', () => {
      // Status change listener
      document.getElementById('orderStatus').addEventListener('change', (e) => {
        const newStatus = e.target.value;
        console.log('Status dropdown change event triggered. New status:', newStatus); // Modified log
        
        // Add confirmation for sensitive status changes
        if (newStatus === 'Cancelled' || newStatus === 'Returned') {
          if (!confirm(`Are you sure you want to change status to ${newStatus}?`)) {
            // Reset dropdown to current status
            e.target.value = '<%= order.status %>';
            return;
          }
        }
        
        updateOrderStatus('<%= order._id %>', newStatus);
      });
      
      // Return request form submission
      document.getElementById('returnRequestForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (isUpdating) return;
        isUpdating = true;
        
        const action = currentReturnAction || document.getElementById('returnActionInput').value;
        const refundAmountInput = document.getElementById('refundAmount');
        const refundAmount = parseFloat(refundAmountInput.value) || 0;

        if (action === 'accept' && (!refundAmount || refundAmount <= 0)) {
          if(refundAmountInput.required) {
            showToast('Please enter a valid refund amount', 'error');
            isUpdating = false;
            return;
          }
        }
        
        try {
          const response = await fetch(`/admin/api/orders/${currentOrderIdForReturn}/return`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ 
              action,
              refundAmount: action === 'accept' ? refundAmount : 0
            })
          });
          
          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Failed to process return request');
          }
          
          bootstrap.Modal.getInstance(document.getElementById('returnRequestModal')).hide();
          showToast('Return request processed successfully');
          setTimeout(() => {
            window.location.reload();
          }, 1000);
          
        } catch (error) {
          console.error('Error processing return request:', error);
          showToast(error.message || 'Error processing return request', 'error');
        } finally {
          isUpdating = false;
        }
      });
      
      // Item return form submission
      document.getElementById('itemReturnForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (isUpdating) return;
        isUpdating = true;
        
        const orderId = document.getElementById('itemReturnOrderId').value;
        const itemId = document.getElementById('itemReturnItemId').value;
        const action = document.getElementById('itemReturnAction').value;
        const refundAmount = parseFloat(document.getElementById('itemRefundAmount').value) || 0;
        const rejectReason = document.getElementById('itemRejectReason').value;

        if (action === 'accept' && (!refundAmount || refundAmount <= 0)) {
            if(document.getElementById('itemRefundAmount').required) {
                showToast('Please enter a valid refund amount', 'error');
                isUpdating = false;
                return;
            }
        }

        if (action === 'reject' && !rejectReason.trim()) {
            if(document.getElementById('itemRejectReason').required) {
                showToast('Please enter a rejection reason', 'error');
                isUpdating = false;
                return;
            }
        }
        
        try {
            const response = await fetch(`/admin/api/orders/${orderId}/items/${itemId}/return`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ 
                    action,
                    refundAmount: action === 'accept' ? refundAmount : 0,
                    rejectReason: action === 'reject' ? rejectReason : undefined
                })
            });
            
            const data = await response.json();
            
            if (!response.ok) {
                throw new Error(data.message || 'Failed to process item return request');
            }
            
            bootstrap.Modal.getInstance(document.getElementById('itemReturnModal')).hide();
            showToast(data.message || 'Item return request processed successfully');
            
            // Reload the page after a short delay to show updated status
            setTimeout(() => {
                window.location.reload();
            }, 1000);
            
        } catch (error) {
            console.error('Error processing item return request:', error);
            showToast(error.message || 'Error processing item return request', 'error');
        } finally {
            isUpdating = false;
        }
      });

      // Add event listener for the return action indicator
      document.querySelectorAll('.return-action-indicator').forEach(indicator => {
        indicator.addEventListener('click', function() {
          const itemId = this.getAttribute('data-item-id');
          const itemActions = document.getElementById(`itemActions-${itemId}`);
          if (itemActions.style.display === 'none') {
            itemActions.style.display = 'flex';
          } else {
            itemActions.style.display = 'none';
          }
        });
      });

      // Check order status on page load and update item statuses if Delivered
      const orderStatusElement = document.querySelector('.badge'); // Assuming the main order status badge exists
      if (orderStatusElement) {
          const currentOrderStatus = orderStatusElement.textContent.trim();
          if (currentOrderStatus === 'Delivered') {
              updateAllItemsToDelivered();
          }
      }
    });
    
    // Helper function to make getStatusBadgeClass available globally (for EJS templating)
    window.getStatusBadgeClass = getStatusBadgeClass;
    window.handleReturnRequest = handleReturnRequest;
    window.showItemReturnModal = showItemReturnModal; // Make new function globally available

    // Helper function to update all item statuses in the table to Delivered
    // This function should also respect already cancelled/returned items
    function updateAllItemsToDelivered() {
        const itemRows = document.querySelectorAll('.table.table-bordered.mt-2 tbody tr');
        itemRows.forEach(row => {
            const statusCell = row.querySelector('td:nth-child(2)'); // Second td contains the status
            if (statusCell) {
                const statusBadge = statusCell.querySelector('.badge');
                if (statusBadge) {
                     const currentItemStatus = statusBadge.textContent.trim();
                     // Only update if the item is not already returned, return requested, or cancelled
                     if (currentItemStatus !== 'Returned' && currentItemStatus !== 'Return Requested' && currentItemStatus !== 'Cancelled') {
                        statusBadge.textContent = 'Delivered';
                        statusBadge.className = 'badge bg-success';
                        // Remove the item-specific return actions container if it exists
                        const itemActionsContainer = statusCell.querySelector('.item-return-actions');
                        if(itemActionsContainer) {
                            itemActionsContainer.remove();
                        }
                         // Remove the indicator as well
                        const indicator = statusCell.querySelector('.return-action-indicator');
                        if(indicator){
                            indicator.remove();
                        }
                     }
                }
            }
        });
    }
  </script>

  <!-- Toast Container -->
  <div class="toast-container"></div>
</body>
</html>