<%- include("../../views/partials/admin/header") %>
<head>
    <style>
        /* All your existing styles preserved */
        .content-main {
            margin-left: 600px;
            margin-top: 50px;
        }
    
        .thumbnails-container {
            display: flex;
            overflow-x: auto;
        }
    
        .thumbnail {
            margin-right: 10px;
        }
    
        .input-upload {
            position: relative;
        }
    
        .error-message {
            color: #b22222;
            display: none;
        }
    
        /* Brown Theme Styling */
        body {
            background-color: #f5f0eb;
            font-family: 'Poppins', sans-serif;
        }
    
        h2.content-title {
            color: #5d3a00;
        }
    
        .form-label {
            color: #5d3a00;
            font-weight: 500;
        }
    
        .form-control,
        .form-select {
            border-color: #a47449;
            background-color: #fffaf5;
        }
    
        .form-control:focus,
        .form-select:focus {
            border-color: #7b4f2d;
            box-shadow: 0 0 0 0.1rem rgba(139, 69, 19, 0.25);
        }
    
        .card {
            border: 1px solid #d2b48c;
            background-color: #fffaf2;
        }
    
        .card-header {
            background-color: #e6d3c0;
            color: #4e342e;
            font-weight: 600;
        }
    
        .btn.btn-info {
            background-color: #8b5e3c;
            color: white;
            border: none;
        }
    
        .btn.btn-info:hover {
            background-color: #70472c;
        }
    
        .btn.btn-primary,
        .btn.btn-primary:focus {
            background-color: #a0522d;
            border-color: #a0522d;
        }
    
        .btn.btn-primary:hover {
            background-color: #8b4513;
            border-color: #8b4513;
        }
    
        .btn.btn-md {
            background-color: #7a491f;
            color: white;
            border: none;
        }
    
        .btn.btn-md:hover {
            background-color: #5c3615;
        }
    
        .image-cropper {
            border: 1px solid #d2b48c;
            background-color: #fcf7f1;
            margin: 10px 0;
            padding: 10px;
        }

        /* Enhanced cropper styling */
        .cropper-container {
            width: 100%;
            max-width: 100%;
        }

        .cropper-view-box,
        .cropper-face {
            border-radius: 0;
        }

        /* Add status message styling */
        .status-message {
            padding: 10px;
            margin-bottom: 15px;
            border-radius: 5px;
        }
        
        .success-message {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .error-message-visible {
            display: block;
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
            padding: 5px;
            margin-top: 5px;
            border-radius: 4px;
        }

        /* Image preview container */
        .image-preview {
            margin-bottom: 10px;
            position: relative;
        }

        .image-preview img {
            border: 2px solid #e6d3c0;
            border-radius: 4px;
        }

        /* Loading spinner for deletion */
        .spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-top-color: #a0522d;
            animation: spin 1s linear infinite;
            margin-left: 10px;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        .preview-image-container {
            position: relative;
            margin-bottom: 15px;
        }

        .preview-image {
            width: 150px;
            height: 150px;
            object-fit: cover;
            border-radius: 4px;
        }

        .remove-preview {
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: rgba(255, 0, 0, 0.7);
            color: white;
            border: none;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }

        .remove-preview:hover {
            background-color: rgba(255, 0, 0, 0.9);
        }

        /* Image counter styling */
        .image-counter {
            background-color: #f8f9fa;
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 15px;
            font-weight: 500;
        }

        .image-counter.warning {
            background-color: #fff3cd;
            color: #856404;
            border: 1px solid #ffeaa7;
        }

        .image-counter.error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        /* Color Picker Styles */
        .color-picker-container {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .color-picker {
            width: 50px;
            height: 50px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            background: none;
            padding: 0;
        }

        .color-picker::-webkit-color-swatch-wrapper {
            padding: 0;
            border-radius: 8px;
        }

        .color-picker::-webkit-color-swatch {
            border: 2px solid #ddd;
            border-radius: 8px;
        }

        .color-input {
            flex: 1;
        }

        .color-preview {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            border: 2px solid #ddd;
            display: inline-block;
            margin-left: 10px;
            vertical-align: middle;
        }

        .color-name {
            font-size: 14px;
            color: #666;
            margin-top: 5px;
        }
    </style>
    
    <!-- Make sure to include these scripts in this specific order -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <!-- Add CSRF token if your application uses it -->
    <meta name="csrf-token" content="<%= typeof csrfToken !== 'undefined' ? csrfToken : '' %>">
</head>
<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Edit Product</h2>
                <% if (locals.error) { %>
                    <div class="status-message error-message-visible" id="server-error-message">
                        <%= error %>
                    </div>
                <% } %>
                <% if (locals.success) { %>
                    <div class="status-message success-message">
                        <%= success %>
                    </div>
                <% } %>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-body">
                    <form method="post" action="/admin/editProduct/<%= product._id %>" enctype="multipart/form-data" id="editProductForm">
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" name="productName" value="<%= product.productName %>"
                                class="form-control border" id="product_name">
                            <div id="productName-error" class="error-message"></div>
                        </div>
                        <div class="col-lg-4 mb-4">
                            <label class="form-label">Brand</label>
                            <select class="form-select border" name="brand">
                            <% for (let i = 0; i < brand.length; i++) { %>
                                <option value="<%= brand[i].brandName %>" 
                                    <% if (product.brand && product.brand._id && brand[i]._id.toString() === product.brand._id.toString()) { %>selected<% } %>>
                                    <%= brand[i].brandName %>
                                </option>
                            <% } %>
                            </select>
                            <div id="brand-error" class="error-message"></div>
                        </div>
                        <div class="col-lg-4 mb-4">
                            <label class="form-label">Category</label>
                            <select class="form-select border" name="category">
                            <% for (let i = 0; i < cat.length; i++) { %>
                                <option value="<%= cat[i].name %>" 
                                    <% if (product.category && product.category._id && cat[i]._id.toString() === product.category._id.toString()) { %>selected<% } %>>
                                    <%= cat[i].name %>
                                </option>
                            <% } %>
                            </select>
                            <div id="category-error" class="error-message"></div>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Full description</label>
                            <textarea name="description" class="form-control border" rows="4"><%= product.description %></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Regular price</label>
                                    <input placeholder="$" name="regularPrice" type="text"
                                        value="<%= product.regularPrice %>" class="form-control border">
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Sale price</label>
                                    <input name="salePrice" type="text" value="<%= product.salePrice %>"
                                        class="form-control border">
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Quantity</label>
                                    <input name="quantity" type="text" value="<%= product.quantity %>"
                                        class="form-control border">
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Color</label>
                                    <div class="color-picker-container">
                                        <input type="color" id="colorPicker" class="color-picker" value="<%= product.color %>" onchange="updateColorInput()">
                                        <input name="color" type="text" value="<%= product.color %>" class="form-control border color-input" id="colorInput" placeholder="Color name or hex code" onchange="updateColorPicker()">
                                    </div>
                                    <div class="color-name" id="colorName"></div>
                                    <div id="color-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="row gx-2">
                                    <div class="col-sm-6 mb-3">
                                        <label class="form-label">Category</label>
                                        <select class="form-select border" style="width: 150px;" name="category">
                                        <% for (let i = 0; i < cat.length; i++) { %>
                                            <option value="<%= cat[i].name %>"
                                                <% if (product.category && product.category._id && cat[i]._id.toString() === product.category._id.toString()) { %>selected<% } %>>
                                                <%= cat[i].name %>
                                            </option>
                                        <% } %>
                                        </select>
                                        <div id="category-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Product Images</label>
                            
                            <!-- Image Counter -->
                            <div class="image-counter" id="imageCounter">
                                Current Images: <span id="currentImageCount"><%= product.productImage ? product.productImage.length : 0 %></span>/4
                            </div>
                            
                            <div class="row">
                                <% if (product.productImage && product.productImage.length > 0) { %>
                                    <div class="col-12 mb-3">
                                        <div class="thumbnails-container">
                                            <% product.productImage.forEach((image, index) => { %>
                                                <div class="thumbnail position-relative">
                                                    <img src="<%= image %>" alt="Product Image" style="width: 100px; height: 100px; object-fit: cover;">
                                                    <button type="button" class="btn btn-danger btn-sm delete-image-btn" 
                                                        data-image="<%= image %>" 
                                                        data-product="<%= product._id %>"
                                                        style="position: absolute; top: 5px; right: 5px;">
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                </div>
                                            <% }); %>
                                        </div>
                                    </div>
                                <% } %>
                                <div class="col-12">
                                    <div class="mb-3">
                                        <label class="form-label">Add New Images</label>
                                        <input type="file" name="images" class="form-control border" multiple accept="image/*" id="imageInput">
                                        <div id="images-error" class="error-message-visible" style="display: none;"></div>
                                        <small class="text-muted">Maximum 4 images total. Accepted formats: JPG, PNG, GIF</small>
                                    </div>
                                
                                    <div id="previewContainer" class="row mt-3">
                                        <!-- Cropped image previews will appear here -->
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="mt-4">
                            <button class="btn btn-md rounded font-sm hover-up" id="updatebtn" type="submit">Update Product</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Cropper Modal - Place outside the form -->
<div class="modal fade" id="cropperModal" tabindex="-1" aria-labelledby="cropperModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cropperModalLabel">Crop Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="img-container">
                    <img id="cropperImage" src="" alt="Image to crop" style="max-width: 100%;">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="cropButton">Crop & Save</button>
            </div>
        </div>
    </div>
</div>

<%- include("../../views/partials/admin/footer") %>

<script>
$(document).ready(function() {
    // Global variables for cropper
    let cropper = null;
    let croppedImages = [];
    let currentFileIndex = 0;
    let files = [];
    let cropperModal = null;
    let existingImagesCount = parseInt('<%= product.productImage ? product.productImage.length : 0 %>');
    
    // Initialize the Bootstrap modal
    cropperModal = new bootstrap.Modal(document.getElementById('cropperModal'));
    
    // Update image counter
    function updateImageCounter() {
        const currentCount = existingImagesCount + croppedImages.length;
        $('#currentImageCount').text(currentCount);
        
        const counter = $('#imageCounter');
        counter.removeClass('warning error');
        
        if (currentCount > 4) {
            counter.addClass('error');
        } else if (currentCount === 4) {
            counter.addClass('warning');
        }
    }
    
    // Validate form fields
    function validateForm() {
        let isValid = true;
        
        // Clear previous errors
        $('.error-message').hide();
        $('#images-error').hide();
        
        // Product name validation
        const productName = $('#product_name').val().trim();
        if (!productName) {
            $('#productName-error').text('Product name is required').show();
            isValid = false;
        } else if (productName.length < 3) {
            $('#productName-error').text('Product name must be at least 3 characters long').show();
            isValid = false;
        }
        
        // Description validation
        const description = $('textarea[name="description"]').val().trim();
        if (!description) {
            $('#description-error').text('Description is required').show();
            isValid = false;
        } else if (description.length < 10) {
            $('#description-error').text('Description must be at least 10 characters long').show();
            isValid = false;
        }
        
        // Price validation
        const regularPrice = $('input[name="regularPrice"]').val().trim();
        if (!regularPrice) {
            $('#regularPrice-error').text('Regular price is required').show();
            isValid = false;
        } else if (isNaN(regularPrice) || parseFloat(regularPrice) <= 0) {
            $('#regularPrice-error').text('Regular price must be a valid positive number').show();
            isValid = false;
        }
        
        const salePrice = $('input[name="salePrice"]').val().trim();
        if (salePrice && (isNaN(salePrice) || parseFloat(salePrice) < 0)) {
            $('#salePrice-error').text('Sale price must be a valid positive number').show();
            isValid = false;
        } else if (salePrice && parseFloat(salePrice) >= parseFloat(regularPrice)) {
            $('#salePrice-error').text('Sale price must be less than regular price').show();
            isValid = false;
        }
        
        // Quantity validation
        const quantity = $('input[name="quantity"]').val().trim();
        if (!quantity) {
            $('#quantity-error').text('Quantity is required').show();
            isValid = false;
        } else if (isNaN(quantity) || parseInt(quantity) < 0) {
            $('#quantity-error').text('Quantity must be a valid non-negative number').show();
            isValid = false;
        }
        
        // Color validation
        const color = $('input[name="color"]').val().trim();
        if (!color) {
            $('#color-error').text('Color is required').show();
            isValid = false;
        }
        
        // Image validation
        const totalImages = existingImagesCount + croppedImages.length;
        if (totalImages < 1) {
            $('#images-error').text('At least 1 product image is required').show();
            isValid = false;
        } else if (totalImages > 4) {
            $('#images-error').text('Maximum 4 product images are allowed').show();
            isValid = false;
        }
        
        return isValid;
    }
    
    // Validate file selection
    function validateFileSelection(selectedFiles) {
        const errors = [];
        const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
        const maxFileSize = 5 * 1024 * 1024; // 5MB
        const fileNames = [];
        
        // Check if adding these files would exceed the limit
        const totalAfterAdd = existingImagesCount + croppedImages.length + selectedFiles.length;
        if (totalAfterAdd > 4) {
            errors.push('Cannot add ' + selectedFiles.length + ' images. Maximum 4 images total allowed. You currently have ' + (existingImagesCount + croppedImages.length) + ' images.');
            return errors;
        }
        
        for (let i = 0; i < selectedFiles.length; i++) {
            const file = selectedFiles[i];
            
            // Check file type
            if (!allowedTypes.includes(file.type.toLowerCase())) {
                errors.push('"' + file.name + '" is not a valid image format. Allowed formats: JPG, PNG, GIF');
                continue;
            }
            
            // Check file size
            if (file.size > maxFileSize) {
                errors.push('"' + file.name + '" is too large. Maximum file size is 5MB');
                continue;
            }
            
            // Check for duplicate names
            if (fileNames.includes(file.name.toLowerCase())) {
                errors.push('Duplicate file name detected: "' + file.name + '"');
                continue;
            }
            
            fileNames.push(file.name.toLowerCase());
        }
        
        return errors;
    }
    
    // Handle image input change event
    $('#imageInput').on('change', function(e) {
        const selectedFiles = Array.from(e.target.files);
        
        if (selectedFiles.length === 0) {
            return;
        }
        
        // Validate file selection
        const validationErrors = validateFileSelection(selectedFiles);
        
        if (validationErrors.length > 0) {
            Swal.fire({
                icon: 'error',
                title: 'Image Selection Error',
                html: '<ul>' + validationErrors.map(error => '<li>' + error + '</li>').join('') + '</ul>',
                confirmButtonColor: '#a0522d'
            });
            
            // Clear the file input
            $(this).val('');
            return;
        }
        
        files = selectedFiles;
        currentFileIndex = 0;
        processNextImage();
    });
    
    function processNextImage() {
        if (currentFileIndex < files.length) {
            const file = files[currentFileIndex];
            
            if (file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    // Set the image source
                    $('#cropperImage').attr('src', e.target.result);
                    
                    // Destroy previous cropper if it exists
                    if (cropper) {
                        cropper.destroy();
                    }
                    
                    // Initialize Cropper
                    cropper = new Cropper(document.getElementById('cropperImage'), {
                        aspectRatio: 1,
                        viewMode: 2,
                        dragMode: 'move',
                        autoCropArea: 1,
                        restore: false,
                        guides: true,
                        center: true,
                        highlight: false,
                        cropBoxMovable: true,
                        cropBoxResizable: true,
                        toggleDragModeOnDblclick: false,
                    });
                    
                    // Open the modal
                    cropperModal.show();
                };
                reader.readAsDataURL(file);
            } else {
                // Skip non-image files
                currentFileIndex++;
                processNextImage();
            }
        } else {
            // Clear the file input after processing all files
            $('#imageInput').val('');
        }
    }
    
    // Crop button click handler
    $('#cropButton').on('click', function() {
        if (!cropper) return;
        
        // Check if we can add more images
        if (existingImagesCount + croppedImages.length >= 4) {
            Swal.fire({
                icon: 'warning',
                title: 'Image Limit Reached',
                text: 'Maximum 4 images are allowed per product.',
                confirmButtonColor: '#a0522d'
            });
            cropperModal.hide();
            return;
        }
        
        // Get the cropped canvas
        const canvas = cropper.getCroppedCanvas({
            width: 440,
            height: 440
        });
        
        // Convert canvas to blob
        canvas.toBlob(function(blob) {
            // Create a preview element
            const previewDiv = $('<div>').addClass('col-md-3');
            const previewContainer = $('<div>').addClass('preview-image-container');
            const previewImg = $('<img>').addClass('preview-image').attr('src', canvas.toDataURL());
            const removeButton = $('<button>').addClass('remove-preview').html('&times;');
            
            previewContainer.append(previewImg, removeButton);
            previewDiv.append(previewContainer);
            $('#previewContainer').append(previewDiv);
            
            // Create a File object from the blob
            const croppedFile = new File([blob], files[currentFileIndex].name, {
                type: 'image/jpeg',
                lastModified: new Date().getTime()
            });
            
            // Store the cropped file
            croppedImages.push(croppedFile);
            
            // Update image counter
            updateImageCounter();
            
            // Remove handler for preview
            removeButton.on('click', function() {
                const index = $('#previewContainer .col-md-3').index(previewDiv);
                if (index > -1) {
                    croppedImages.splice(index, 1);
                    previewDiv.remove();
                    updateImageCounter();
                }
            });
            
            // Close the modal
            cropperModal.hide();
            
            // Process next image if available
            currentFileIndex++;
            setTimeout(processNextImage, 500);
        }, 'image/jpeg', 0.9);
    });
    
    // Handle form submission
    $('#editProductForm').on('submit', function(e) {
        e.preventDefault();
        
        // Validate form
        if (!validateForm()) {
            Swal.fire({
                icon: 'error',
                title: 'Validation Error',
                text: 'Please fix the errors above before submitting.',
                confirmButtonColor: '#a0522d'
            });
            return;
        }
        
        // Create a new FormData object
        const formData = new FormData(this);
        
        // If there are cropped images, replace the original image files
        if (croppedImages.length > 0) {
            // Remove the original image files
            formData.delete('images');
            
            // Add each cropped image
            croppedImages.forEach(function(file) {
                formData.append('images', file);
            });
        }
        
        // Show loading state
        const submitButton = $('#updatebtn');
        const originalText = submitButton.text();
        submitButton.text('Updating...').prop('disabled', true);
        
        // Submit the form with FormData
        $.ajax({
            url: $(this).attr('action'),
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Product updated successfully!',
                    confirmButtonColor: '#a0522d'
                }).then(() => {
                    window.location.href = '/admin/products?success=Product updated successfully!';
                });
            },
            error: function(xhr, status, error) {
                console.error('Error submitting form:', error);
                let errorMessage = 'Error updating product';
                
                if (xhr.responseJSON && xhr.responseJSON.message) {
                    errorMessage = xhr.responseJSON.message;
                } else if (xhr.responseText) {
                    errorMessage = xhr.responseText;
                }
                
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: errorMessage,
                    confirmButtonColor: '#a0522d'
                });
            },
            complete: function() {
                // Restore button state
                submitButton.text(originalText).prop('disabled', false);
            }
        });
    });
    
    // Handle image deletion
    $('.delete-image-btn').on('click', function() {
        const imageName = $(this).data('image');
        const productId = $(this).data('product');
        
        if (imageName && productId) {
            // Check if this would leave us with too few images
            if (existingImagesCount + croppedImages.length <= 1) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Cannot Delete',
                    text: 'At least 1 product image is required.',
                    confirmButtonColor: '#a0522d'
                });
                return;
            }
            
            deleteImage(imageName, productId, $(this));
        }
    });
    
    // Function to delete an image
    function deleteImage(imageName, productId, buttonElement) {
        Swal.fire({
            title: 'Delete Image?',
            text: 'Are you sure you want to delete this image?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#a0522d',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                // Add loading spinner
                const originalHtml = buttonElement.html();
                buttonElement.html('<span class="spinner"></span>');
                buttonElement.prop('disabled', true);
                
                $.ajax({
                    url: '/admin/deleteImage',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        imageNameToServer: imageName,
                        productIdToServer: productId
                    }),
                    success: function(response) {
                        if (response.status === true) {
                            // Remove the thumbnail
                            buttonElement.closest('.thumbnail').remove();
                            // Decrease existing images count
                            existingImagesCount--;
                            updateImageCounter();
                            
                            Swal.fire({
                                icon: 'success',
                                title: 'Deleted!',
                                text: 'Image deleted successfully.',
                                confirmButtonColor: '#a0522d'
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error!',
                                text: response.message || 'Failed to delete image',
                                confirmButtonColor: '#a0522d'
                            });
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: 'Error deleting image: ' + error,
                            confirmButtonColor: '#a0522d'
                        });
                    },
                    complete: function() {
                        // Restore button state
                        buttonElement.html(originalHtml);
                        buttonElement.prop('disabled', false);
                    }
                });
            }
        });
    }
    
    // Handle modal close event - clean up cropper
    $('#cropperModal').on('hidden.bs.modal', function() {
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }
    });
    
    // Add event listener for product name duplication check on blur
    document.getElementById('product_name').addEventListener('blur', async function() {
        const productName = this.value.trim();
        const productId = '<%= product._id %>'; // Get the current product ID

        if (productName) { // Only check if name is not empty
            try {
                const response = await fetch(`/admin/products/checkDuplicateName?productName=${encodeURIComponent(productName)}&productId=${productId}`);
                const data = await response.json();
                
                if (data.isDuplicate) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Duplicate Product Name',
                        text: data.message,
                        confirmButtonColor: '#a0522d'
                    });
                    // You might want to clear the input or disable the submit button here
                }
            } catch (error) {
                console.error('Error checking duplicate product name:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Could not check for duplicate product name.',
                    confirmButtonColor: '#a0522d'
                });
            }
        }
    });
    
    // Initialize image counter on page load
    updateImageCounter();
});

// Color Picker Functions
function updateColorInput() {
    const colorPicker = document.getElementById('colorPicker');
    const colorInput = document.getElementById('colorInput');
    const colorName = document.getElementById('colorName');
    
    const hexColor = colorPicker.value;
    colorInput.value = hexColor;
    
    // Get color name from hex
    const colorNames = {
        '#000000': 'Black',
        '#FFFFFF': 'White',
        '#FF0000': 'Red',
        '#00FF00': 'Green',
        '#0000FF': 'Blue',
        '#FFFF00': 'Yellow',
        '#FF00FF': 'Magenta',
        '#00FFFF': 'Cyan',
        '#FFA500': 'Orange',
        '#800080': 'Purple',
        '#FFC0CB': 'Pink',
        '#A52A2A': 'Brown',
        '#808080': 'Gray',
        '#FFD700': 'Gold',
        '#C0C0C0': 'Silver',
        '#8B4513': 'Saddle Brown',
        '#228B22': 'Forest Green',
        '#4169E1': 'Royal Blue',
        '#DC143C': 'Crimson',
        '#FF6347': 'Tomato'
    };
    
    colorName.textContent = colorNames[hexColor.toUpperCase()] || `Color: ${hexColor}`;
}

function updateColorPicker() {
    const colorPicker = document.getElementById('colorPicker');
    const colorInput = document.getElementById('colorInput');
    const colorName = document.getElementById('colorName');
    
    let inputValue = colorInput.value.trim();
    
    // Check if input is a valid hex color
    if (/^#[0-9A-F]{6}$/i.test(inputValue)) {
        colorPicker.value = inputValue;
        updateColorInput();
    } else {
        // Try to convert color names to hex
        const colorNameToHex = {
            'black': '#000000',
            'white': '#FFFFFF',
            'red': '#FF0000',
            'green': '#00FF00',
            'blue': '#0000FF',
            'yellow': '#FFFF00',
            'magenta': '#FF00FF',
            'cyan': '#00FFFF',
            'orange': '#FFA500',
            'purple': '#800080',
            'pink': '#FFC0CB',
            'brown': '#A52A2A',
            'gray': '#808080',
            'grey': '#808080',
            'gold': '#FFD700',
            'silver': '#C0C0C0',
            'saddle brown': '#8B4513',
            'forest green': '#228B22',
            'royal blue': '#4169E1',
            'crimson': '#DC143C',
            'tomato': '#FF6347'
        };
        
        const hexColor = colorNameToHex[inputValue.toLowerCase()];
        if (hexColor) {
            colorPicker.value = hexColor;
            colorInput.value = hexColor;
            updateColorInput();
        } else {
            colorName.textContent = `Custom: ${inputValue}`;
        }
    }
}

// Initialize color picker on page load
document.addEventListener('DOMContentLoaded', function() {
    // Set initial color picker value based on existing color
    const colorInput = document.getElementById('colorInput');
    if (colorInput && colorInput.value) {
        const colorPicker = document.getElementById('colorPicker');
        // Try to set the color picker to the existing color value
        if (/^#[0-9A-F]{6}$/i.test(colorInput.value)) {
            colorPicker.value = colorInput.value;
        } else {
            // If it's not a hex color, try to convert it
            updateColorPicker();
        }
        updateColorInput();
    }
});

// Function to get URL parameters
function getUrlParameter(name) {
    name = name.replace(/[\[]/, '\\\\[').replace(/[\]]/, '\\\\]');
    var regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');
    var results = regex.exec(location.search);
    return results === null ? '' : decodeURIComponent(results[1].replace(/\\+/g, ' '));
}

// Check for error message on page load
window.onload = function() {
    const urlParams = new URLSearchParams(window.location.search);
    const errorMessage = urlParams.get('error');
    const successMessage = urlParams.get('success');

    if (errorMessage) {
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: errorMessage,
            confirmButtonColor: '#a0522d'
        });
    } else if (successMessage) {
        Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: successMessage,
            confirmButtonColor: '#a0522d'
        });
    }

    // Clear the query parameters after displaying the alert to prevent it from showing again on reload
    if (errorMessage || successMessage) {
        history.replaceState({}, document.title, window.location.pathname);
    }
};
</script>