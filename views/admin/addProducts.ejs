
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Responsive Admin Dashboard</title>
    <link rel="stylesheet" href="/adminDashboard.css">
    <!-- Add Cropper.js -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
</head>
<%- include("../../views/partials/admin/header") %>

<style>
    /* Base styles */
    * {
        box-sizing: border-box;
    }

    body {
        margin: 0;
        padding: 0;
        font-family: 'Arial', sans-serif;
        background-color: #f8f9fa;
    }

    /* Override sidebar width for Add Products page only */
    .sidebar {
        width: 220px !important; /* Slightly wider than 180px, less than original 240px */
        min-width: 210px !important;
        height: 100vh !important; /* Decrease sidebar height for this page only */
        transition: none !important; /* Remove sliding/transition effect */
    }
    .content-main {
        margin-left: 180px; /* Match the new sidebar width */
        transition: none !important;
    }

    /* Ensure main content is shifted right for sidebar */
    .content-main {
        display: flex;
        justify-content: center;
        align-items: flex-start;
        min-height: 80vh;
        padding: 20px;
        width: 100%;
        margin-top: 60px;
        margin-left: 180px; /* Match sidebar width */
        transition: margin-left 0.3s ease;
    }

    @media (max-width: 1024px) {
        .content-main {
            margin-left: 0;
            padding: 30px;
        }
    }
    @media (max-width: 576px) {
        .content-main {
            padding: 10px;
        }
    }

    .card {
        width: 100%;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        background: white;
    }

    .form-control, .form-select {
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 10px;
        width: 100%;
        border: 1px solid #ddd;
        font-size: 14px;
    }

    button {
        width: 100%;
        padding: 12px;
        border-radius: 8px;
        font-weight: bold;
        background-color: #6e4911;
        color: white;
        border: none;
        transition: background 0.3s ease;
        cursor: pointer;
        font-size: 16px;
    }

    button:hover {
        background-color: #604f12;
    }

    .row {
        margin-bottom: 15px;
    }

    .thumbnails-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        padding: 10px;
        justify-content: center;
    }

    .image-cropper {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        width: 100%;
        max-width: 300px;
        height: auto;
        margin: 0 auto 20px;
        padding: 10px;
        border: 2px dashed #ddd;
        border-radius: 8px;
    }

    .image-cropper img {
        max-width: 100%;
        max-height: 250px;
        object-fit: contain;
        border-radius: 8px;
    }

    .error-message {
        color: red;
        font-size: 12px;
        margin-top: 5px;
    }

    .thumbnail {
        position: relative;
        margin: 5px;
        max-width: 100px;
        max-height: 100px;
        overflow: hidden;
        border-radius: 8px;
        border: 1px solid #ddd;
    }

    .thumbnail img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .remove-icon {
        position: absolute;
        top: 5px;
        right: 5px;
        background: rgba(255, 0, 0, 0.8);
        color: white;
        width: 20px;
        height: 20px;
        text-align: center;
        line-height: 20px;
        border-radius: 50%;
        cursor: pointer;
        font-size: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .color-picker-container {
        display: flex;
        align-items: center;
        gap: 10px;
        flex-wrap: wrap;
    }

    .color-picker {
        width: 50px;
        height: 50px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        background: none;
        padding: 0;
        flex-shrink: 0;
    }

    .color-picker::-webkit-color-swatch-wrapper {
        padding: 0;
        border-radius: 8px;
    }

    .color-picker::-webkit-color-swatch {
        border: 2px solid #ddd;
        border-radius: 8px;
    }

    .color-input {
        flex: 1;
        min-width: 100px;
    }

    .color-preview {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        border: 2px solid #ddd;
        display: inline-block;
        margin-left: 10px;
        vertical-align: middle;
        flex-shrink: 0;
    }

    .color-name {
        font-size: 14px;
        color: #666;
        margin-top: 5px;
        width: 100%;
    }

    /* Responsive breakpoints */
    
    /* Large screens (desktops) */
    @media (min-width: 1200px) {
        .content-main {
            padding: 50px;
            margin-left: 300px; /* Adjust based on sidebar width */
        }
    }

    /* Medium screens (tablets) */
    @media (max-width: 1199px) and (min-width: 768px) {
        .content-main {
            padding: 30px;
            margin-left: 0;
        }
        
        .card {
            max-width: 100%;
            padding: 20px;
        }
        
        .color-picker-container {
            flex-direction: column;
            align-items: stretch;
        }
        
        .color-picker {
            width: 100%;
            max-width: 80px;
        }
    }

    /* Small screens (mobile landscape) */
    @media (max-width: 767px) and (min-width: 576px) {
        .content-main {
            padding: 20px;
            margin-left: 0;
        }
        
        .card {
            padding: 15px;
        }
        
        .image-cropper {
            max-width: 100%;
            height: auto;
        }
        
        .image-cropper img {
            max-height: 200px;
        }
        
        .thumbnails-container {
            gap: 5px;
            padding: 5px;
        }
        
        .thumbnail {
            max-width: 80px;
            max-height: 80px;
        }
        
        .color-picker-container {
            flex-direction: column;
            align-items: stretch;
            gap: 5px;
        }
        
        .color-picker {
            width: 100%;
            max-width: 60px;
        }
        
        .form-control, .form-select {
            padding: 10px;
            font-size: 16px; /* Prevents zoom on iOS */
        }
        
        button {
            padding: 14px;
            font-size: 16px;
        }
    }

    /* Extra small screens (mobile portrait) */
    @media (max-width: 575px) {
        .content-main {
            padding: 15px;
            margin-left: 0;
            align-items: stretch;
        }
        
        .card {
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);
        }
        
        .image-cropper {
            max-width: 100%;
            height: auto;
            padding: 5px;
        }
        
        .image-cropper img {
            max-height: 150px;
        }
        
        .thumbnails-container {
            gap: 3px;
            padding: 5px;
            justify-content: flex-start;
        }
        
        .thumbnail {
            max-width: 60px;
            max-height: 60px;
        }
        
        .remove-icon {
            width: 16px;
            height: 16px;
            line-height: 16px;
            font-size: 10px;
            top: 2px;
            right: 2px;
        }
        
        .color-picker-container {
            flex-direction: column;
            align-items: stretch;
            gap: 10px;
        }
        
        .color-picker {
            width: 100%;
            max-width: 50px;
            height: 40px;
        }
        
        .color-preview {
            width: 25px;
            height: 25px;
        }
        
        .form-control, .form-select {
            padding: 12px;
            font-size: 16px; /* Prevents zoom on iOS */
            margin-bottom: 15px;
        }
        
        button {
            padding: 15px;
            font-size: 16px;
            margin-top: 10px;
        }
        
        .row {
            margin-bottom: 10px;
        }
        
        .col-12 {
            padding-left: 0;
            padding-right: 0;
        }
    }

    /* Ultra small screens */
    @media (max-width: 320px) {
        .content-main {
            padding: 10px;
        }
        
        .card {
            padding: 10px;
        }
        
        .form-control, .form-select {
            padding: 10px;
            font-size: 14px;
        }
        
        button {
            padding: 12px;
            font-size: 14px;
        }
        
        .image-cropper img {
            max-height: 120px;
        }
        
        .thumbnail {
            max-width: 50px;
            max-height: 50px;
        }
    }

    /* Landscape orientation adjustments */
    @media (orientation: landscape) and (max-height: 600px) {
        .content-main {
            padding: 10px;
            min-height: auto;
        }
        
        .image-cropper {
            max-width: 250px;
        }
        
        .image-cropper img {
            max-height: 150px;
        }
    }

    /* High DPI screens */
    @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
        .thumbnail img {
            image-rendering: -webkit-optimize-contrast;
            image-rendering: crisp-edges;
        }
    }

    /* Dark mode support */
    @media (prefers-color-scheme: dark) {
        body {
            background-color: #1a1a1a;
            color: #ffffff;
        }
        
        .card {
            background-color: #2d2d2d;
            border: 1px solid #444;
        }
        
        .form-control, .form-select {
            background-color: #3a3a3a;
            border-color: #555;
            color: #ffffff;
        }
        
        .image-cropper {
            border-color: #555;
        }
        
        .thumbnail {
            border-color: #555;
        }
    }

    /* Accessibility improvements */
    @media (prefers-reduced-motion: reduce) {
        * {
            animation-duration: 0.01ms !important;
            animation-iteration-count: 1 !important;
            transition-duration: 0.01ms !important;
        }
    }

    /* Focus styles for better accessibility */
    .form-control:focus, .form-select:focus, button:focus {
        outline: 2px solid #6e4911;
        outline-offset: 2px;
    }

    /* Print styles */
    @media print {
        .content-main {
            margin: 0;
            padding: 0;
        }
        
        .card {
            box-shadow: none;
            border: 1px solid #000;
        }
        
        button {
            display: none;
        }
    }

    /* Make sidebar menu items shorter for Add Products page only */
    .sidebar .nav-menu a {
        padding: 4px 14px !important; /* Further reduce vertical padding */
        font-size: 0.9rem !important;
        min-height: 24px !important;
    }
    .sidebar .nav-menu li {
        min-height: 24px !important;
    }
</style>

<section class="content-main">
    <div class="row">
        <div class="col-12">
            <div class="content-header">
                <h2 class="content-title">Add New Product</h2>
            </div>
        </div>
        <div class="col-lg-8">
            <div class="card mb-4">
                <div class="card-body">
                    <form method="post" action="/admin/addProducts" enctype="multipart/form-data" id="productForm" onsubmit="return validateForm()">
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" placeholder="Type here" name="productName" class="form-control" id="product_name">
                            <div id="productName-error" class="error-message"></div>
                        </div>
                        
                        <div class="mb-4">
                            <label class="form-label">Brand</label>
                            <select name="brand" class="form-select" required>
                                <option value="">Select a Brand</option>
                                <% brand.forEach(b => { %>
                                  <option value="<%= b.brandName %>"><%= b.brandName %></option>
                                <% }) %>
                            </select>
                            <div id="brand-error" class="error-message"></div>
                        </div>
                        
                        <div class="mb-4">
                            <label class="form-label">Full description</label>
                            <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control" rows="4"></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                        
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Regular price</label>
                                    <input placeholder="$" name="regularPrice" type="text" class="form-control">
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Sale price</label>
                                    <input placeholder="$" name="salePrice" type="text" class="form-control">
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Quantity</label>
                                    <input placeholder="" name="quantity" type="number" min="0" class="form-control">
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Color</label>
                                    <div class="color-picker-container">
                                        <input type="color" id="colorPicker" class="color-picker" value="#000000" onchange="updateColorInput()">
                                        <input name="color" type="text" class="form-control color-input" id="colorInput" placeholder="Color name or hex code" onchange="updateColorPicker()">
                                    </div>
                                    <div class="color-name" id="colorName"></div>
                                    <div id="color-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-sm-6 mb-3">
                                        <label class="form-label">Category</label>
                                        <select class="form-select" name="category" required>
                                            <option value="">Select a Category</option>
                                            <%for(let i=0; i<cat.length; i++){%>
                                                <option value="<%=cat[i].name%>">
                                                    <%=cat[i].name%>
                                                </option>
                                            <%}%>
                                        </select>
                                        <div id="category-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="card mb-4">
                            <div class="card-header">
                                <h4>Product Images</h4>
                            </div>
                            <div class="border row">
                                <div id="addedImagesContainer" class="thumbnails-container"></div>
                            </div>
                            
                            <!-- Image upload 1 -->
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="card-body">
                                        <label class="form-label">Image 1 (Main Image)</label>
                                        <input class="form-control" type="file" name="images" id="input1" accept="image/png, image/jpeg, image/jpg" onchange="viewImage(event, 1)">
                                        <div id="images-error" class="error-message"></div>
                                        <div class="mt-2">
                                            <img src="" alt="" id="imgView1" style="max-height: 200px; max-width: 100%; display: none;">
                                        </div>
                                    </div>
                                    <div class="image-cropper" id="cropperContainer1" style="display:none;">
                                        <img src="" id="croppedImg1" alt="">
                                        <button type="button" id="saveButton1" class="btn-sm btn-primary mt-2">Save Cropped Image</button>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Image upload 2 -->
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="card-body">
                                        <label class="form-label">Image 2</label>
                                        <input class="form-control" type="file" name="images" id="input2" accept="image/png, image/jpeg, image/jpg" onchange="viewImage(event, 2)">
                                        <div class="mt-2">
                                            <img src="" alt="" id="imgView2" style="max-height: 200px; max-width: 100%; display: none;">
                                        </div>
                                    </div>
                                    <div class="image-cropper" id="cropperContainer2" style="display:none;">
                                        <img src="" id="croppedImg2" alt="">
                                        <button type="button" id="saveButton2" class="btn-sm btn-primary mt-2">Save Cropped Image</button>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Image upload 3 -->
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="card-body">
                                        <label class="form-label">Image 3</label>
                                        <input class="form-control" type="file" name="images" id="input3" accept="image/png, image/jpeg, image/jpg" onchange="viewImage(event, 3)">
                                        <div class="mt-2">
                                            <img src="" alt="" id="imgView3" style="max-height: 200px; max-width: 100%; display: none;">
                                        </div>
                                    </div>
                                    <div class="image-cropper" id="cropperContainer3" style="display:none;">
                                        <img src="" id="croppedImg3" alt="">
                                        <button type="button" id="saveButton3" class="btn-sm btn-primary mt-2">Save Cropped Image</button>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Image upload 4 -->
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="card-body">
                                        <label class="form-label">Image 4</label>
                                        <input class="form-control" type="file" name="images" id="input4" accept="image/png, image/jpeg, image/jpg" onchange="viewImage(event, 4)">
                                        <div class="mt-2">
                                            <img src="" alt="" id="imgView4" style="max-height: 200px; max-width: 100%; display: none;">
                                        </div>
                                    </div>
                                    <div class="image-cropper" id="cropperContainer4" style="display:none;">
                                        <img src="" id="croppedImg4" alt="">
                                        <button type="button" id="saveButton4" class="btn-sm btn-primary mt-2">Save Cropped Image</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="text-center">
                            <button class="btn btn-primary" type="submit">Publish Product</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

<script>
    // Global variable to store croppers
    const croppers = {};
    
    function validateAndSubmit() {
        if (validateForm()) {
            document.getElementById('productForm').submit();
        }
    }
    
    function viewImage(event, index) {
        // First destroy any existing cropper for this index
        if (croppers[index]) {
            croppers[index].destroy();
            croppers[index] = null;
        }
        
        const input = event.target;
        if (input.files && input.files[0]) {
            const reader = new FileReader();
            
            reader.onload = function() {
                const dataURL = reader.result;
                const image = document.getElementById("imgView" + index);
                image.src = dataURL;
                image.style.display = "block";
                
                // Initialize cropper
                croppers[index] = new Cropper(image, {
                    aspectRatio: 1,
                    viewMode: 1,
                    guides: true,
                    background: false,
                    autoCropArea: 0.8,
                    zoomable: true
                });
                
                // Show cropper container
                const cropperContainer = document.getElementById("cropperContainer" + index);
                cropperContainer.style.display = 'block';
                
                // Setup save button action
                const saveButton = document.getElementById('saveButton' + index);
                saveButton.onclick = function() {
                    const croppedCanvas = croppers[index].getCroppedCanvas();
                    const croppedImage = document.getElementById("croppedImg" + index);
                    croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);
                    
                    const timestamp = new Date().getTime();
                    const filename = `cropped-img-${timestamp}-${index}.png`;
                    
                    croppedCanvas.toBlob(blob => {
                        const input = document.getElementById('input' + index);
                        const imgFile = new File([blob], filename, {type: "image/png"});
                        const fileList = new DataTransfer();
                        fileList.items.add(imgFile);
                        input.files = fileList.files;
                        
                        // Add to thumbnails
                        addThumbnail(imgFile, index);
                    });
                    
                    // Hide the original image and cropper
                    image.style.display = "none";
                    cropperContainer.style.display = "none";
                    
                    // Destroy the cropper instance
                    croppers[index].destroy();
                    croppers[index] = null;
                };
            };
            
            reader.readAsDataURL(input.files[0]);
        }
    }
    
    // Selected images tracking
    const selectedImages = [];
    
    function addThumbnail(file, index) {
        const addedImagesContainer = document.getElementById("addedImagesContainer");
        
        // Create thumbnail
        const thumbnail = document.createElement("div");
        thumbnail.classList.add("thumbnail");
        thumbnail.dataset.index = index;
        
        const img = document.createElement("img");
        img.src = URL.createObjectURL(file);
        img.alt = "thumbnail";
        img.style.width = "80px";
        img.style.height = "80px";
        img.style.objectFit = "cover";
        
        const removeIcon = document.createElement("span");
        removeIcon.classList.add("remove-icon");
        removeIcon.innerHTML = "&times;";
        removeIcon.addEventListener("click", function() {
            // Clear the file input
            const input = document.getElementById('input' + index);
            input.value = '';
            
            // Hide the cropped image
            const croppedImg = document.getElementById('croppedImg' + index);
            croppedImg.src = '';
            
            // Remove thumbnail
            thumbnail.remove();
        });
        
        thumbnail.appendChild(img);
        thumbnail.appendChild(removeIcon);
        
        // Check if a thumbnail with this index already exists
        const existingThumbnail = addedImagesContainer.querySelector(`.thumbnail[data-index="${index}"]`);
        if (existingThumbnail) {
            addedImagesContainer.replaceChild(thumbnail, existingThumbnail);
        } else {
            addedImagesContainer.appendChild(thumbnail);
        }
    }
    
    function validateForm() {
        clearErrorMessages();
        
        const name = document.getElementsByName('productName')[0].value;
        const description = document.getElementById('descriptionid').value;
        const price = document.getElementsByName('regularPrice')[0].value;
        const salePrice = document.getElementsByName('salePrice')[0].value;
        const color = document.getElementsByName('color')[0].value;
        const quantity = document.getElementsByName('quantity')[0].value;
        const images = document.getElementById('input1');
        
        let isValid = true;
        
        // Product name validation
        if (name.trim() === "") {
            displayErrorMessage('productName-error', 'Please enter a product name.');
            isValid = false;
        }
        
        // Description validation
        if (description.trim() === "") {
            displayErrorMessage('description-error', 'Please enter a product description.');
            isValid = false;
        }
        
        // Quantity validation
        if (quantity.trim() === "" || parseInt(quantity) < 0) {
            displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
            isValid = false;
        }
        
        // Price validation
        if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) <= 0) {
            displayErrorMessage('regularPrice-error', 'Please enter a valid positive price.');
            isValid = false;
        }
        
        // Sale price validation (optional but if provided must be valid)
        if (salePrice.trim() !== "") {
            if (!/^\d+(\.\d{1,2})?$/.test(salePrice) || parseFloat(salePrice) < 0) {
                displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
                isValid = false;
            }
            
            // Compare regular price and sale price if both are valid
            if (parseFloat(price) <= parseFloat(salePrice) && isValid) {
                displayErrorMessage('salePrice-error', 'Sale price must be less than regular price.');
                isValid = false;
            }
        }
        
        // Color validation
        if (color.trim() === "") {
            displayErrorMessage('color-error', 'Please enter a color.');
            isValid = false;
        }
        
        // Image validation
        // Check for minimum 4 images
        const imageInputs = document.querySelectorAll('input[name="images"]');
        let totalImages = 0;
        imageInputs.forEach(input => {
            if (input.files && input.files.length > 0) {
                // On the add page, after cropping, each 'images' input should have one file.
                // We need to count the number of input elements that actually have a selected file.
                totalImages += input.files.length; // This should add 1 for each input with a file
            }
        });

        if (totalImages < 4) {
            Swal.fire({
                icon: 'error',
                title: 'Image Error!',
                text: 'Please upload at least 4 product images.'
            });
            isValid = false;
            return false;
        }
        
        return isValid;
    }
    
    function displayErrorMessage(elementId, message) {
        const errorElement = document.getElementById(elementId);
        if (errorElement) {
            errorElement.innerText = message;
            errorElement.style.display = "block";
        }
    }
    
    function clearErrorMessages() {
        const errorElements = document.getElementsByClassName('error-message');
        Array.from(errorElements).forEach(element => {
            element.innerText = '';
            element.style.display = "none";
        });
    }

    function getUrlParameter(name) {
        name = name.replace(/[\[]/, '\\\\[').replace(/[\]]/, '\\\\]');
        var regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');
        var results = regex.exec(location.search);
        return results === null ? '' : decodeURIComponent(results[1].replace(/\\+/g, ' '));
    };

    window.onload = function() {
        const errorMessage = getUrlParameter('error');
        if (errorMessage) {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: errorMessage
            });
        }
    };

    document.getElementById('product_name').addEventListener('blur', async function() {
        const productName = this.value.trim();
        if (productName) { 
            try {
                const response = await fetch(`/admin/products/checkDuplicateName?productName=${encodeURIComponent(productName)}`);
                const data = await response.json();
                
                if (data.isDuplicate) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Duplicate Product Name',
                        text: data.message,
                        confirmButtonColor: '#a0522d'
                    });
                }
            } catch (error) {
                console.error('Error checking duplicate product name:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Could not check for duplicate product name.',
                    confirmButtonColor: '#a0522d'
                });
            }
        }
    });

    // Color Picker Functions
    function updateColorInput() {
        const colorPicker = document.getElementById('colorPicker');
        const colorInput = document.getElementById('colorInput');
        const colorName = document.getElementById('colorName');
        
        const hexColor = colorPicker.value;
        colorInput.value = hexColor;
        
        // Get color name from hex
        const colorNames = {
            '#000000': 'Black',
            '#FFFFFF': 'White',
            '#FF0000': 'Red',
            '#00FF00': 'Green',
            '#0000FF': 'Blue',
            '#FFFF00': 'Yellow',
            '#FF00FF': 'Magenta',
            '#00FFFF': 'Cyan',
            '#FFA500': 'Orange',
            '#800080': 'Purple',
            '#FFC0CB': 'Pink',
            '#A52A2A': 'Brown',
            '#808080': 'Gray',
            '#FFD700': 'Gold',
            '#C0C0C0': 'Silver',
            '#8B4513': 'Saddle Brown',
            '#228B22': 'Forest Green',
            '#4169E1': 'Royal Blue',
            '#DC143C': 'Crimson',
            '#FF6347': 'Tomato'
        };
        
        colorName.textContent = colorNames[hexColor.toUpperCase()] || `Color: ${hexColor}`;
    }

    function updateColorPicker() {
        const colorPicker = document.getElementById('colorPicker');
        const colorInput = document.getElementById('colorInput');
        const colorName = document.getElementById('colorName');
        
        let inputValue = colorInput.value.trim();
        
        if (/^#[0-9A-F]{6}$/i.test(inputValue)) {
            colorPicker.value = inputValue;
            updateColorInput();
        } else {
            const colorNameToHex = {
                'black': '#000000',
                'white': '#FFFFFF',
                'red': '#FF0000',
                'green': '#00FF00',
                'blue': '#0000FF',
                'yellow': '#FFFF00',
                'magenta': '#FF00FF',
                'cyan': '#00FFFF',
                'orange': '#FFA500',
                'purple': '#800080',
                'pink': '#FFC0CB',
                'brown': '#A52A2A',
                'gray': '#808080',
                'grey': '#808080',
                'gold': '#FFD700',
                'silver': '#C0C0C0',
                'saddle brown': '#8B4513',
                'forest green': '#228B22',
                'royal blue': '#4169E1',
                'crimson': '#DC143C',
                'tomato': '#FF6347'
            };
            
            const hexColor = colorNameToHex[inputValue.toLowerCase()];
            if (hexColor) {
                colorPicker.value = hexColor;
                colorInput.value = hexColor;
                updateColorInput();
            } else {
                colorName.textContent = `Custom: ${inputValue}`;
            }
        }
    }

    // Initialize color picker on page load
    document.addEventListener('DOMContentLoaded', function() {
        updateColorInput();
    });
</script>

<%- include("../../views/partials/admin/footer") %>