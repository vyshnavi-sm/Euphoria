<%- include("../../views/partials/admin/header") %>

<style>
    :root {
        --primary-brown: #5D4037;
        --secondary-brown: #8B6B61;
        --light-brown: #A1887F;
        --background-brown: #f8f4f0;
        --border-brown: #e8d9c5;
        --text-dark: #3E2723;
        --text-light: #8D6E63;
        --shadow-color: rgba(93, 64, 55, 0.1);
    }

    /* Use .main-content for layout consistency with admin sidebar */
    .main-content {
        margin-left: 240px;
        transition: margin-left 0.3s ease;
        background: var(--background-brown);
        min-height: 100vh;
        padding: clamp(1rem, 4vw, 2.5rem);
    }
    @media (max-width: 992px) {
        .main-content {
            margin-left: 0 !important;
            padding: 1rem;
        }
    }
    @media (max-width: 768px) {
        .main-content {
            padding: 0.75rem;
        }
    }
    @media (max-width: 576px) {
        .main-content {
            padding: 0.5rem;
        }
    }

    /* Remove margin-left from .container-fluid and .table-card-right, rely on .main-content */
    .container-fluid {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0;
        width: 100%;
    }
    .table-card-right {
        margin-left: 0 !important;
        margin-right: 0 !important;
    }

    /* Responsive Table Styles */
    .table-responsive {
        border: 1px solid var(--border-brown);
        border-radius: 8px;
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
    }
    .table thead th:first-child,
    .table tbody td:first-child {
        position: sticky;
        left: 0;
        background-color: white;
        z-index: 10;
        border-right: 2px solid var(--border-brown);
    }
    .table thead th:first-child {
        background-color: var(--primary-brown);
        color: white;
    }

    /* Card Styles */
    .card {
        box-shadow: 0 4px 12px var(--shadow-color);
        border: none;
        background-color: white;
        border-radius: 12px;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        animation: fadeIn 0.3s ease-out;
    }
    .card:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px var(--shadow-color);
    }
    .card-header {
        background-color: var(--primary-brown);
        color: white;
        border-radius: 12px 12px 0 0;
        font-size: 1.25rem;
        font-weight: 600;
        padding: 1rem 1.5rem;
    }
    @media (max-width: 768px) {
        .card-header {
            font-size: 1.1rem;
            padding: 0.8rem 1rem;
        }
    }

    /* Form Styles */
    .form-label {
        color: var(--text-dark);
        font-weight: 500;
        margin-bottom: 0.5rem;
    }
    .form-control, .form-select {
        border: 1px solid var(--border-brown);
        border-radius: 8px;
        padding: 0.75rem 1rem;
        color: var(--text-dark);
        background-color: #fffaf5;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
    }
    .form-control:focus, .form-select:focus {
        border-color: var(--primary-brown);
        box-shadow: 0 0 0 0.2rem rgba(93, 64, 55, 0.15);
        outline: none;
    }
    @media (max-width: 768px) {
        .form-control, .form-select {
            padding: 0.6rem 0.8rem;
            font-size: 0.9rem;
        }
    }

    /* Button Styles */
    .btn-primary {
        background-color: var(--primary-brown);
        border-color: var(--primary-brown);
        padding: 0.75rem 1.5rem;
        font-weight: 500;
        border-radius: 8px;
        transition: all 0.2s ease;
    }
    .btn-primary:hover {
        background-color: var(--secondary-brown);
        border-color: var(--secondary-brown);
        transform: translateY(-1px);
    }
    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
        border-radius: 8px;
        transition: all 0.2s ease;
    }
    .btn-danger:hover {
        background-color: #c82333;
        border-color: #bd2130;
        transform: translateY(-1px);
    }
    .btn-warning {
        background-color: var(--light-brown);
        border-color: var(--light-brown);
        color: var(--text-dark);
        border-radius: 8px;
        transition: all 0.2s ease;
    }
    .btn-warning:hover {
        background-color: #9a7d74;
        border-color: #9a7d74;
        transform: translateY(-1px);
    }
    .btn-success {
        background-color: var(--secondary-brown);
        border-color: var(--secondary-brown);
        border-radius: 8px;
        transition: all 0.2s ease;
    }
    .btn-success:hover {
        background-color: #7d5c53;
        border-color: #7d5c53;
        transform: translateY(-1px);
    }
    @media (max-width: 768px) {
        .btn {
            padding: 0.6rem 1rem;
            font-size: 0.9rem;
        }
    }
    @media (max-width: 576px) {
        .btn-primary {
            width: 100%;
            margin-bottom: 0.5rem;
        }
    }

    /* Table Styles */
    .table {
        border-radius: 8px;
        overflow: hidden;
        width: 100%;
        min-width: 600px;
    }
    .table thead th {
        background-color: var(--primary-brown);
        color: white;
        font-weight: 500;
        border: none;
        padding: 1rem;
        text-align: center;
        vertical-align: middle;
    }
    .table tbody td {
        padding: 1rem;
        vertical-align: middle;
        border-bottom: 1px solid var(--border-brown);
        color: var(--text-dark);
        text-align: center;
    }
    .table tbody tr:hover {
        background-color: var(--background-brown);
        transition: background-color 0.2s ease;
    }
    .table tbody tr:last-child td {
        border-bottom: none;
    }
    @media (max-width: 992px) {
        .table {
            min-width: 500px;
            font-size: 13px;
        }
    }
    @media (max-width: 768px) {
        .table {
            min-width: 400px;
            font-size: 12px;
        }
    }
    @media (max-width: 576px) {
        .table {
            min-width: 350px;
            font-size: 11px;
        }
    }
    @media (max-width: 480px) {
        .table {
            min-width: 300px;
            font-size: 10px;
        }
    }
    @media (max-width: 400px) {
        .table {
            min-width: 250px;
            font-size: 9px;
        }
    }

    /* Badge Styles */
    .badge.bg-success {
        background-color: var(--secondary-brown) !important;
        font-size: 0.75rem;
        padding: 0.5rem 0.75rem;
        border-radius: 20px;
    }
    .badge.bg-danger {
        background-color: #dc3545 !important;
        font-size: 0.75rem;
        padding: 0.5rem 0.75rem;
        border-radius: 20px;
    }

    /* Action Buttons */
    .action-buttons {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        align-items: stretch;
    }
    .action-buttons form,
    .action-buttons .btn {
        width: 100%;
        margin-bottom: 0.5rem;
    }
    .action-buttons .btn:last-child {
        margin-bottom: 0;
    }
    @media (min-width: 768px) {
        .action-buttons {
            flex-direction: row;
            justify-content: center;
            gap: 0.5rem;
        }
        .action-buttons form,
        .action-buttons .btn {
            width: auto;
            margin-bottom: 0;
            flex: 1;
        }
    }

    /* Coupon specific styles */
    .coupon-card {
        background: linear-gradient(135deg, #fff 0%, #f8f4f0 100%);
        border-left: 4px solid var(--primary-brown);
        margin-bottom: 1rem;
    }
    .coupon-code {
        font-family: 'Courier New', monospace;
        font-weight: bold;
        font-size: 1.1rem;
        color: var(--primary-brown);
        background-color: rgba(93, 64, 55, 0.1);
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        display: inline-block;
    }
    .coupon-discount {
        font-size: 1.2rem;
        font-weight: bold;
        color: var(--secondary-brown);
    }

    /* Loading and empty states */
    .loading-state {
        text-align: center;
        padding: 2rem;
        color: var(--text-light);
    }
    .empty-state {
        text-align: center;
        padding: 3rem;
        color: var(--text-light);
    }
    .empty-state i {
        font-size: 3rem;
        margin-bottom: 1rem;
        color: var(--light-brown);
    }

    /* Animations */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
</style>

<div class="main-content">
  <div class="container-fluid">
    <h1 class="mt-4 table-card-right">Coupon Management</h1>

    <% if (success_msg && success_msg.length > 0) { %>
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <%= success_msg %>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    <% } %>

    <% if (error_msg && error_msg.length > 0) { %>
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <%= error_msg %>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    <% } %>

    <div class="card mt-4 table-card-right">
        <div class="card-header">
            <h2>Add New Coupon</h2>
        </div>
        <div class="card-body">
            <form action="/admin/coupons" method="POST">
                <div class="row mb-3">
                    <div class="col-md-4">
                        <label for="code" class="form-label">Coupon Code</label>
                        <input type="text" class="form-control" id="code" name="code" required>
                        <div class="invalid-feedback" id="code-error"></div>
                    </div>
                    <div class="col-md-4">
                        <label for="discountType" class="form-label">Discount Type</label>
                        <select class="form-select" id="discountType" name="discountType" required>
                            <option value="percentage">Percentage (%)</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="discountValue" class="form-label">Discount Value</label>
                        <input type="number" class="form-control" id="discountValue" name="discountValue" step="0.01" min="0" required>
                        <div class="invalid-feedback" id="discountValue-error"></div>
                    </div>
                </div>

                <div class="row mb-3">
                     <div class="col-md-4">
                        <label for="minOrderAmount" class="form-label">Minimum Order Amount (₹)</label>
                        <input type="number" class="form-control" id="minOrderAmount" name="minOrderAmount" step="0.01" min="0">
                        <div class="invalid-feedback" id="minOrderAmount-error"></div>
                    </div>
                    <div class="col-md-4">
                        <label for="maxDiscountAmount" class="form-label">Maximum Discount Amount (₹)</label>
                        <input type="number" class="form-control" id="maxDiscountAmount" name="maxDiscountAmount" step="0.01" min="0">
                        <div class="invalid-feedback" id="maxDiscountAmount-error"></div>
                    </div>
                    <div class="col-md-4">
                        <label for="usageLimit" class="form-label">Usage Limit</label>
                        <input type="number" class="form-control" id="usageLimit" name="usageLimit" min="1">
                        <div class="invalid-feedback" id="usageLimit-error"></div>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-4">
                        <label for="startDate" class="form-label">Start Date</label>
                        <input type="date" class="form-control" id="startDate" name="startDate" required>
                        <div class="invalid-feedback" id="startDate-error"></div>
                    </div>
                    <div class="col-md-4">
                        <label for="endDate" class="form-label">End Date</label>
                        <input type="date" class="form-control" id="endDate" name="endDate" required>
                        <div class="invalid-feedback" id="endDate-error"></div>
                    </div>
                </div>

                <button type="submit" class="btn btn-primary">Create Coupon</button>
            </form>
        </div>
    </div>

    <div class="card mt-4 table-card-right">
        <div class="card-header">
            <h2>Existing Coupons</h2>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Type</th>
                            <th>Value</th>
                            <th>Min Amount</th>
                            <th>Max Discount</th>
                            <th>Start Date</th>
                            <th>End Date</th>
                            <th>Usage Limit</th>
                            <th>Used Count</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (coupons && coupons.length > 0) { %>
                            <% coupons.forEach(coupon => { %>
                                <tr>
                                    <td><%= coupon.code %></td>
                                    <td><%= coupon.discountType %></td>
                                    <td><%= coupon.discountValue %></td>
                                    <td><%= coupon.minOrderAmount %></td>
                                    <td><%= coupon.maxDiscountAmount %></td>
                                    <td><%= new Date(coupon.startDate).toLocaleDateString() %></td>
                                    <td><%= new Date(coupon.endDate).toLocaleDateString() %></td>
                                    <td><%= coupon.usageLimit %></td>
                                    <td><%= coupon.usageCount %></td>
                                    <td>
                                        <span class="badge bg-<%= coupon.isActive ? 'success' : 'danger' %>">
                                            <%= coupon.isActive ? 'Active' : 'Inactive' %>
                                        </span>
                                    </td>
                                    <td>
                                        <div class="action-buttons">
                                            <form action="/admin/coupons/<%= coupon._id %>?_method=DELETE" method="POST" style="display: inline;">
                                                <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Are you sure you want to delete this coupon?');">Delete</button>
                                            </form>
                                            <button type="button" class="btn btn-<%= coupon.isActive ? 'warning' : 'success' %> btn-sm toggle-coupon-btn" 
                                                data-coupon-id="<%= coupon._id %>" 
                                                data-active="<%= coupon.isActive %>">
                                                <%= coupon.isActive ? 'Deactivate' : 'Activate' %>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            <% }) %>
                        <% } else { %>
                            <tr>
                                <td colspan="11" class="text-center">No coupons found.</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </div>
            <!-- Pagination controls -->
            <% if (typeof totalPages !== 'undefined' && totalPages > 1) { %>
            <nav aria-label="Coupon pagination" class="mt-3">
              <ul class="pagination justify-content-center">
                <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                  <a class="page-link" href="?page=<%= currentPage - 1 %>" tabindex="-1">Previous</a>
                </li>
                <% for(let i = 1; i <= totalPages; i++) { %>
                  <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                    <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                  </li>
                <% } %>
                <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                  <a class="page-link" href="?page=<%= currentPage + 1 %>">Next</a>
                </li>
              </ul>
            </nav>
            <% } %>
        </div>
    </div>
  </div>
</div>

<%- include("../../views/partials/admin/footer") %>

<script>
    // Basic client-side date validation (optional, backend validation is already there)
    document.getElementById('startDate').addEventListener('change', function() {
        document.getElementById('endDate').min = this.value;
    });

    // AJAX for toggling coupon status
    document.querySelectorAll('.toggle-coupon-btn').forEach(function(btn) {
        btn.addEventListener('click', async function() {
            const couponId = this.dataset.couponId;
            const isActive = this.dataset.active === 'true';
            try {
                const response = await fetch(`/admin/coupons/${couponId}/toggle?_method=PATCH`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                    },
                });
                if (response.ok) {
                    // Toggle status in UI
                    const row = this.closest('tr');
                    const badge = row.querySelector('.badge');
                    if (isActive) {
                        badge.classList.remove('bg-success');
                        badge.classList.add('bg-danger');
                        badge.textContent = 'Inactive';
                        this.classList.remove('btn-warning');
                        this.classList.add('btn-success');
                        this.textContent = 'Activate';
                        this.dataset.active = 'false';
                    } else {
                        badge.classList.remove('bg-danger');
                        badge.classList.add('bg-success');
                        badge.textContent = 'Active';
                        this.classList.remove('btn-success');
                        this.classList.add('btn-warning');
                        this.textContent = 'Deactivate';
                        this.dataset.active = 'true';
                    }
                } else {
                    alert('Failed to update coupon status.');
                }
            } catch (err) {
                alert('Error updating coupon status.');
            }
        });
    });

    // Coupon form validation with inline error messages
    const couponForm = document.querySelector('form[action="/admin/coupons"]');
    couponForm.addEventListener('submit', function(e) {
        let valid = true;
        // Clear previous errors
        ["code","discountValue","minOrderAmount","maxDiscountAmount","usageLimit","startDate","endDate"].forEach(id => {
            document.getElementById(id+"-error").textContent = "";
            document.getElementById(id).classList.remove("is-invalid");
        });
        const code = document.getElementById('code').value.trim();
        const discountValue = parseFloat(document.getElementById('discountValue').value);
        const minOrderAmount = parseFloat(document.getElementById('minOrderAmount').value);
        const maxDiscountAmount = parseFloat(document.getElementById('maxDiscountAmount').value);
        const usageLimit = parseInt(document.getElementById('usageLimit').value);
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        const now = new Date();
        // Code validation
        if (!code || code.length < 3 || !/^[a-zA-Z0-9]+$/.test(code)) {
            valid = false;
            document.getElementById('code-error').textContent = 'Coupon code is required, at least 3 characters, and alphanumeric.';
            document.getElementById('code').classList.add('is-invalid');
        }
        // Discount value validation
        if (isNaN(discountValue) || discountValue <= 0 || discountValue > 100) {
            valid = false;
            document.getElementById('discountValue-error').textContent = 'Discount value must be between 1 and 100.';
            document.getElementById('discountValue').classList.add('is-invalid');
        }
        // Min order amount
        if (isNaN(minOrderAmount) || minOrderAmount < 1) {
            valid = false;
            document.getElementById('minOrderAmount-error').textContent = 'Minimum order amount is required and must be at least 1.';
            document.getElementById('minOrderAmount').classList.add('is-invalid');
        }
        // Max discount amount
        if (isNaN(maxDiscountAmount) || maxDiscountAmount < 1) {
            valid = false;
            document.getElementById('maxDiscountAmount-error').textContent = 'Maximum discount amount is required and must be at least 1.';
            document.getElementById('maxDiscountAmount').classList.add('is-invalid');
        } else if (!isNaN(discountValue) && maxDiscountAmount < discountValue) {
            valid = false;
            document.getElementById('maxDiscountAmount-error').textContent = 'Maximum discount amount cannot be less than discount value.';
            document.getElementById('maxDiscountAmount').classList.add('is-invalid');
        } else if (!isNaN(minOrderAmount) && maxDiscountAmount > minOrderAmount) {
            valid = false;
            document.getElementById('maxDiscountAmount-error').textContent = 'Maximum discount amount cannot be greater than minimum order amount.';
            document.getElementById('maxDiscountAmount').classList.add('is-invalid');
        }
        // Usage limit
        if (!isNaN(usageLimit) && usageLimit < 1) {
            valid = false;
            document.getElementById('usageLimit-error').textContent = 'Usage limit must be at least 1.';
            document.getElementById('usageLimit').classList.add('is-invalid');
        }
        // Date validation
        if (!startDate) {
            valid = false;
            document.getElementById('startDate-error').textContent = 'Start date is required.';
            document.getElementById('startDate').classList.add('is-invalid');
        } else if (new Date(startDate) < now.setHours(0,0,0,0)) {
            valid = false;
            document.getElementById('startDate-error').textContent = 'Start date cannot be in the past.';
            document.getElementById('startDate').classList.add('is-invalid');
        }
        if (!endDate) {
            valid = false;
            document.getElementById('endDate-error').textContent = 'End date is required.';
            document.getElementById('endDate').classList.add('is-invalid');
        } else if (startDate && new Date(endDate) <= new Date(startDate)) {
            valid = false;
            document.getElementById('endDate-error').textContent = 'End date must be after start date.';
            document.getElementById('endDate').classList.add('is-invalid');
        }
        if (!valid) {
            e.preventDefault();
        }
    });
</script> 