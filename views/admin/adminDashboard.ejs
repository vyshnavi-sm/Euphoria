<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Admin Dashboard - EUPHORIA</title>
  <link 
    rel="stylesheet" 
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
  />
  <link 
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" 
    rel="stylesheet"
  />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
  <style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #a28f87 0%, #432410 100%);
        min-height: 100vh;
    }

    /* Top Bar */
    .topbar {
        background:#5D4037;
        backdrop-filter: blur(10px);
        border-bottom: #5D4037;
        padding: 1rem 0;
        position: fixed;
        top: 0; left: 0; right: 0;
        z-index: 1000;
    }

    .logo {
        color: white;
        font-size: 1.5rem;
        font-weight: bold;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }

    /* Sidebar */
    .sidebar {
      width: 200px;
      height: 100vh;
      background-color: #5D4037;
      padding-top: 90px;
      position: fixed;
      top: 0;
      left: 0;
      overflow-y: auto;
    }

    .sidebar ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .sidebar ul li {
      margin: 0;
    }

    .sidebar ul li a {
      display: flex;
      padding: 15px 20px;
      color: #ccc;
      text-decoration: none;
      font-size: 16px;
      transition: 0.3s;
      border-left: 4px solid transparent;
    }

    .sidebar ul li a:hover {
      background-color: #5C4033;
      color: #fff;
    }

    .sidebar ul li a.active {
      background-color:#5C4035;
      color: #ffffff;
      font-weight: bold;
      border-left: 4px solid #00bcd4;
    }

    .nav-menu {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .nav-menu li a {
        display: flex;
        align-items: center;
        padding: 12px 20px;
        color: #5C4033;
        text-decoration: none;
        transition: all 0.2s ease;
        border-left: 4px solid transparent;
        font-weight: 500;
    }

    .nav-menu li a i {
        margin-right: 12px;
        width: 20px;
        text-align: center;
    }

    .nav-menu li a.active,
    .nav-menu li a:hover {
        background: #f6f2ee;
        border-left-color: #5C4033;
        color: #5C4033;
    }

    /* Main content */
    .main-content {
        margin-left: 250px;
        margin-top: 80px;
        padding: 30px;
        min-height: calc(100vh - 80px);
    }

    /* Dashboard cards */
    .dashboard-card {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 20px;
        padding: 25px;
        margin-bottom: 25px;
        box-shadow: 0 15px 35px rgba(0,0,0,0.1);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .dashboard-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 25px 50px rgba(0,0,0,0.15);
    }

    /* Stats grid */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        background: linear-gradient(135deg, #97786a 0%, #5C4033 100%);
        color: white;
        padding: 25px;
        border-radius: 15px;
        text-align: center;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        transition: transform 0.3s ease;
    }

    .stat-card:hover {
        transform: scale(1.05);
    }

    .stat-value {
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 5px;
    }

    .stat-label {
        font-size: 0.9rem;
        opacity: 0.9;
    }

    /* Chart container */
    .chart-container {
        position: relative;
        height: 400px;
        margin: 20px 0;
    }

    /* Filter buttons */
    .filter-buttons {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
        flex-wrap: wrap;
    }

    .filter-btn {
        padding: 8px 16px;
        border: none;
        border-radius: 20px;
        background: rgba(92, 64, 51, 0.9);
        color: white;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .filter-btn:hover,
    .filter-btn.active {
        background: #452b1e;
        transform: translateY(-2px);
    }

    /* Top lists */
    .top-list {
        max-height: 400px;
        overflow-y: auto;
    }

    .list-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        margin-bottom: 10px;
        background: #fff;
        border-radius: 10px;
        border-left: 4px solid #5C4033;
        transition: all 0.3s ease;
    }

    .list-item:hover {
        transform: translateX(5px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .list-rank {
        background: #5C4033;
        color: white;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
    }

    /* Buttons */
    .btn-generate {
        background: linear-gradient(135deg, #5C4033 0%, #5C4033 100%);
        border: none;
        color: white;
        padding: 12px 30px;
        border-radius: 25px;
        font-weight: bold;
        transition: all 0.3s ease;
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }

    .btn-generate:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 25px rgba(0,0,0,0.3);
    }

    /* Page titles */
    .page-title {
        color: white;
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 10px;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }

    .page-subtitle {
        color: rgba(255, 255, 255, 0.8);
        font-size: 1.1rem;
        margin-bottom: 30px;
    }

    /* Loading spinner */
    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #5C4033;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 2s linear infinite;
        margin: 20px auto;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    /* Responsive */
    @media (max-width: 768px) {
        .sidebar {
            transform: translateX(-100%);
        }
        .main-content {
            margin-left: 0;
        }
        .stats-grid {
            grid-template-columns: 1fr;
        }
    }

    .error-message {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
        padding: 15px;
        border-radius: 10px;
        margin: 20px 0;
    }
  </style>
</head>
<body>
  <!-- Topbar -->
  <header class="topbar">
    <div class="container-fluid d-flex justify-content-between align-items-center">
      <div class="logo"><strong>EUPHORIA</strong></div>
      <div class="d-flex gap-3">
        <i class="fas fa-envelope text-white fs-5"></i>
        <i class="fas fa-bell text-white fs-5"></i>
        <img 
          src="https://t4.ftcdn.net/jpg/02/79/66/93/360_F_279669366_Lk12QalYQKMczLEa4ySjhaLtx1M2u7e6.jpg" 
          class="rounded-circle" 
          style="width:35px;height:35px;" 
          alt="Admin Avatar"
        />
      </div>
    </div>
  </header>

  <!-- Sidebar -->
  <aside class="sidebar">
    <ul class="nav-menu">
      <li><a href="/admin/dashboard" class="active"><i class="fas fa-chart-line"></i> Dashboard</a></li>
      <li><a href="/admin/customers"><i class="fas fa-users"></i> Customers</a></li>
      <li><a href="/admin/category"><i class="fas fa-box"></i> Category</a></li>
      <li><a href="/admin/brands"><i class="fas fa-tags"></i> Brands</a></li>
      <li><a href="/admin/products"><i class="fas fa-shopping-bag"></i> Products</a></li>
      <li><a href="/admin/coupons"><i class="fas fa-ticket-alt"></i> Coupons</a></li>
      <li><a href="/admin/banners"><i class="fas fa-image"></i> Banners</a></li>
      <li><a href="/admin/orders"><i class="fas fa-clipboard-list"></i> Orders</a></li>
      <li><a href="/admin/sales-report"><i class="fas fa-chart-bar"></i> Sales Report</a></li>
      <li><a href="/admin/refunds"><i class="fas fa-undo-alt"></i> Refunds</a></li>
      <li><a href="/admin/logout"><i class="fas fa-sign-out-alt"></i> Sign Out</a></li>
    </ul>
  </aside>

  <!-- Main Content -->
  <main class="main-content">
    <div class="container-fluid">
      <h1 class="page-title">Dashboard</h1>
      <p class="page-subtitle">Your business insights at a glance</p>

      <!-- Loading Spinner -->
      <div id="loadingSpinner" class="spinner"></div>

        <!-- Dashboard Content -->
        <div id="dashboardContent">
          <!-- Statistics Cards -->
          <div class="stats-grid">
            <div class="stat-card">
              <div class="stat-value" id="statRevenue">â‚¹<%= totalRevenue %></div>
              <div class="stat-label">Total Revenue</div>
              <%= totalRevenue %>

            </div>
            <div class="stat-card">
              <div class="stat-value" id="statOrders"><%= totalOrders %></div>
              <div class="stat-label">Total Orders</div>
              <%= totalOrders %>

            </div>
            <div class="stat-card">
              <div class="stat-value" id="statCustomers">0</div>
              <div class="stat-label">Active Customers</div>
              <%= activeCustomers %>

            </div>
            <div class="stat-card">
              <div class="stat-value" id="statSold"><%= productsSold %></div>
              <div class="stat-label">Products Sold</div>
            </div>
          </div>

        <!-- Sales Chart -->
        <div class="dashboard-card">
          <div class="d-flex justify-content-between align-items-center mb-3">
            <h3><i class="fas fa-chart-line me-2"></i>Sales Analytics</h3>
            <div class="filter-buttons">
              <button class="filter-btn active" onclick="changeFilter('daily')">Daily</button>
              <button class="filter-btn" onclick="changeFilter('weekly')">Weekly</button>
              <button class="filter-btn" onclick="changeFilter('monthly')">Monthly</button>
              <button class="filter-btn" onclick="changeFilter('yearly')">Yearly</button>
            </div>
          </div>
          <div class="chart-container">
            <canvas id="salesChart"></canvas>
          </div>
        </div>

        <!-- Top Lists -->
        <div class="row">
          <div class="col-lg-4 mb-4">
            <div class="dashboard-card">
              <h4><i class="fas fa-trophy me-2"></i>Top 10 Products</h4>
              <div class="top-list" id="topProducts">
                <p class="text-muted text-center py-3">Loading...</p>
              </div>
            </div>
          </div>
          <div class="col-lg-4 mb-4">
            <div class="dashboard-card">
              <h4><i class="fas fa-tags me-2"></i>Top 10 Categories</h4>
              <div class="top-list" id="topCategories">
                <p class="text-muted text-center py-3">Loading...</p>
              </div>
            </div>
          </div>
          <div class="col-lg-4 mb-4">
            <div class="dashboard-card">
              <h4><i class="fas fa-star me-2"></i>Top 10 Brands</h4>
              <div class="top-list" id="topBrands">
                <p class="text-muted text-center py-3">Loading...</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Ledger Generator -->
        <div class="dashboard-card">
          <div class="d-flex justify-content-between align-items-center flex-wrap">
            <div class="mb-3">
              <h4><i class="fas fa-book me-2"></i>Ledger Book Generator</h4>
              <p class="text-muted mb-0">Generate comprehensive financial reports</p>
            </div>
            <div class="d-flex gap-2 flex-wrap">
              <select id="ledgerPeriod" class="form-select" style="width:auto;">
                <option value="current_month">Current Month</option>
                <option value="last_month">Last Month</option>
                <option value="quarter">This Quarter</option>
                <option value="year">This Year</option>
                <option value="custom">Custom Range</option>
              </select>
              <button class="btn btn-generate" onclick="generateLedger()">
                <i class="fas fa-download me-2"></i>Generate Ledger
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
  let salesChart;
let currentFilter = 'daily';
let dashboardData = null;
let refreshInterval = null;

// Utility function to show/hide loading
function showLoading(show = true) {
  const spinner = document.getElementById('loadingSpinner');
  const content = document.getElementById('dashboardContent');
  
  if (show) {
    if (spinner) spinner.style.display = 'block';
    if (content) content.style.display = 'none';
  } else {
    if (spinner) spinner.style.display = 'none';
    if (content) content.style.display = 'block';
  }
}

function formatCurrency(amount) {
            return new Intl.NumberFormat('en-IN', {
                style: 'currency',
                currency: 'INR',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            }).format(amount);
        }

        function formatNumber(num) {
            return new Intl.NumberFormat('en-IN').format(num);
        }

        function showError(message) {
            const errorDiv = document.getElementById('errorMessage');
            const errorText = document.getElementById('errorText');
            errorText.textContent = message;
            errorDiv.style.display = 'block';
            
            // Hide error after 5 seconds
            setTimeout(() => {
                errorDiv.style.display = 'none';
            }, 5000);
        }

        function updateStats(data) {
            // Update statistics cards
            document.getElementById('statRevenue').textContent = formatCurrency(data.totalRevenue || 0);
            document.getElementById('statOrders').textContent = formatNumber(data.totalOrders || 0);
            document.getElementById('statCustomers').textContent = formatNumber(data.activeCustomers || 0);
            document.getElementById('statSold').textContent = formatNumber(data.productsSold || 0);
        }

        function updateTopItems(data) {
            // Update top products
            const productsList = document.getElementById('topProductsList');
            if (data.topProducts && data.topProducts.length > 0) {
                productsList.innerHTML = data.topProducts.map(product => `
                    <li class="top-item">
                        <span class="item-name">${product.name}</span>
                        <div class="item-stats">
                            <span>Sold: ${formatNumber(product.sold)}</span>
                            <span>Revenue: ${formatCurrency(product.revenue)}</span>
                        </div>
                    </li>
                `).join('');
            } else {
                productsList.innerHTML = '<li class="loading">No products data available</li>';
            }

            // Update top categories
            const categoriesList = document.getElementById('topCategoriesList');
            if (data.topCategories && data.topCategories.length > 0) {
                categoriesList.innerHTML = data.topCategories.map(category => `
                    <li class="top-item">
                        <span class="item-name">${category.name}</span>
                        <div class="item-stats">
                            <span>Sold: ${formatNumber(category.sold)}</span>
                            <span>Revenue: ${formatCurrency(category.revenue)}</span>
                        </div>
                    </li>
                `).join('');
            } else {
                categoriesList.innerHTML = '<li class="loading">No categories data available</li>';
            }

            // Update top brands
            const brandsList = document.getElementById('topBrandsList');
            if (data.topBrands && data.topBrands.length > 0) {
                brandsList.innerHTML = data.topBrands.map(brand => `
                    <li class="top-item">
                        <span class="item-name">${brand.name}</span>
                        <div class="item-stats">
                            <span>Sold: ${formatNumber(brand.sold)}</span>
                            <span>Revenue: ${formatCurrency(brand.revenue)}</span>
                        </div>
                    </li>
                `).join('');
            } else {
                brandsList.innerHTML = '<li class="loading">No brands data available</li>';
            }
        }

        async function loadDashboardData() {
            try {
                const response = await fetch('/admin/dashboard/data', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                if (!response.ok) {
                    if (response.status === 401) {
                        window.location.href = '/admin/login';
                        return;
                    }
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                
                if (data.success) {
                    console.log('Dashboard data loaded successfully:', data);
                    updateStats(data);
                    updateTopItems(data);
                    
                    // Show dashboard content
                    document.getElementById('dashboardContent').style.display = 'block';
                } else {
                    throw new Error(data.message || 'Failed to load dashboard data');
                }
            } catch (error) {
                console.error('Error loading dashboard data:', error);
                showError(`Failed to load dashboard data: ${error.message}`);
                
                // Show dashboard with default values
                document.getElementById('dashboardContent').style.display = 'block';
                updateStats({
                    totalRevenue: 0,
                    totalOrders: 0,
                    activeCustomers: 0,
                    productsSold: 0
                });
                updateTopItems({
                    topProducts: [],
                    topCategories: [],
                    topBrands: []
                });
            }
        }

        async function refreshDashboard() {
            const refreshBtn = document.querySelector('.refresh-btn');
            const refreshText = document.getElementById('refreshText');
            
            // Disable button and show loading
            refreshBtn.disabled = true;
            refreshText.textContent = 'Refreshing...';
            
            try {
                await loadDashboardData();
                refreshText.textContent = 'Data Refreshed!';
                
                // Reset button text after 2 seconds
                setTimeout(() => {
                    refreshText.textContent = 'Refresh Data';
                    refreshBtn.disabled = false;
                }, 2000);
            } catch (error) {
                refreshText.textContent = 'Refresh Data';
                refreshBtn.disabled = false;
                showError('Failed to refresh dashboard data');
            }
        }

        // Load dashboard data when page loads
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Dashboard page loaded, fetching data...');
            loadDashboardData();
        });

        // Auto-refresh every 5 minutes
        setInterval(loadDashboardData, 300000);

// Generate sample data for testing when no real data is available
function generateSampleData(filter) {
  const now = new Date();
  let labels = [];
  let data = [];
  
  switch (filter) {
    case 'daily':
      // Last 30 days instead of 7 for better visualization
      for (let i = 29; i >= 0; i--) {
        const date = new Date(now);
        date.setDate(date.getDate() - i);
        labels.push(date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }));
        data.push(Math.floor(Math.random() * 50000) + 10000);
      }
      break;
      
    case 'weekly':
      // Last 12 weeks
      for (let i = 11; i >= 0; i--) {
        const date = new Date(now);
        date.setDate(date.getDate() - (i * 7));
        const weekStart = new Date(date);
        weekStart.setDate(date.getDate() - date.getDay());
        labels.push(`Week ${Math.ceil((weekStart.getDate()) / 7)}`);
        data.push(Math.floor(Math.random() * 200000) + 50000);
      }
      break;
      
    case 'monthly':
      // Last 12 months
      for (let i = 11; i >= 0; i--) {
        const date = new Date(now);
        date.setMonth(date.getMonth() - i);
        labels.push(date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' }));
        data.push(Math.floor(Math.random() * 500000) + 100000);
      }
      break;
      
    case 'yearly':
      // Last 5 years
      for (let i = 4; i >= 0; i--) {
        const year = now.getFullYear() - i;
        labels.push(year.toString());
        data.push(Math.floor(Math.random() * 2000000) + 500000);
      }
      break;
  }
  
  return { labels, data };
}

// Enhanced fetch dashboard data with better error handling
async function loadDashboard() {
  try {
    showLoading(true);
    console.log('Fetching dashboard data...');
    
    // Add timeout to prevent hanging requests
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout
    
    const response = await fetch('/admin/dashboard-data', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      },
      signal: controller.signal
    });
    
    clearTimeout(timeoutId);
    
    if (!response.ok) {
      if (response.status === 401) {
        // Session expired, redirect to login
        window.location.href = '/admin/login';
        return;
      }
      throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}`);
    }
    
    const contentType = response.headers.get('content-type');
    if (!contentType || !contentType.includes('application/json')) {
      throw new Error('Invalid response format - expected JSON');
    }
    
    dashboardData = await response.json();
    console.log('Dashboard data loaded:', dashboardData);
    
    if (dashboardData.success === false) {
      throw new Error(dashboardData.message || 'Failed to load dashboard data');
    }
    
    // Validate data structure
    if (!validateDashboardData(dashboardData)) {
      throw new Error('Invalid dashboard data structure received');
    }
    
    // Update UI components
    updateStatsCards();
    initChart();
    populateTopLists();
    
    showLoading(false);
    
  } catch (error) {
    console.error('Error loading dashboard:', error);
    showLoading(false);
    
    if (error.name === 'AbortError') {
      showError('Request timed out. Please check your connection and try again.');
    } else if (error.message.includes('Failed to fetch')) {
      showError('Network error. Please check your internet connection.');
    } else {
      // Use fallback data for demonstration
      console.log('Using sample data for demonstration');
      dashboardData = generateFallbackData();
      
      updateStatsCards();
      initChart();
      populateTopLists();
      
      showError(`Could not load live data: ${error.message}. Showing sample data for demonstration.`);
    }
  }
}

// Validate dashboard data structure
function validateDashboardData(data) {
  if (!data || typeof data !== 'object') return false;
  
  // Check required properties
  const requiredProps = ['totalRevenue', 'totalOrders', 'activeCustomers', 'productsSold'];
  for (const prop of requiredProps) {
    if (data[prop] === undefined || data[prop] === null) {
      console.warn(`Missing required property: ${prop}`);
      data[prop] = 0; // Set default value
    }
  }
  
  // Ensure arrays exist
  const arrayProps = ['salesChartData', 'weeklyData', 'monthlyData', 'yearlyData', 'topProducts', 'topCategories', 'topBrands'];
  for (const prop of arrayProps) {
    if (!Array.isArray(data[prop])) {
      console.warn(`Invalid or missing array property: ${prop}`);
      data[prop] = [];
    }
  }
  
  return true;
}

// Generate fallback data when server fails
function generateFallbackData() {
  return {
    success: true,
    totalRevenue: 1250000,
    totalOrders: 450,
    activeCustomers: 320,
    productsSold: 1200,
    salesChartData: [],
    weeklyData: [],
    monthlyData: [],
    yearlyData: [],
    topProducts: [
      { name: 'Premium Coffee Blend', sold: 245, revenue: 98000 },
      { name: 'Organic Tea Collection', sold: 189, revenue: 75600 },
      { name: 'Artisan Chocolate Box', sold: 156, revenue: 62400 },
      { name: 'Specialty Honey Jar', sold: 134, revenue: 53600 },
      { name: 'Gourmet Spice Set', sold: 98, revenue: 39200 }
    ],
    topCategories: [
      { name: 'Beverages', sold: 534, revenue: 213600 },
      { name: 'Snacks & Confectionery', sold: 423, revenue: 169200 },
      { name: 'Organic Products', sold: 312, revenue: 124800 },
      { name: 'Spices & Condiments', sold: 245, revenue: 98000 },
      { name: 'Health Foods', sold: 189, revenue: 75600 }
    ],
    topBrands: [
      { name: 'Euphoria Premium', sold: 345, revenue: 138000 },
      { name: 'Nature\'s Best', sold: 289, revenue: 115600 },
      { name: 'Golden Harvest', sold: 234, revenue: 93600 },
      { name: 'Pure Essence', sold: 178, revenue: 71200 },
      { name: 'Artisan Select', sold: 145, revenue: 58000 }
    ]
  };
}

// Enhanced update statistics cards with animation
function updateStatsCards() {
  if (!dashboardData) return;
  
  const stats = [
    { id: 'statRevenue', value: dashboardData.totalRevenue || 0, format: 'currency' },
    { id: 'statOrders', value: dashboardData.totalOrders || 0, format: 'number' },
    { id: 'statCustomers', value: dashboardData.activeCustomers || 0, format: 'number' },
    { id: 'statSold', value: dashboardData.productsSold || 0, format: 'number' }
  ];
  
  stats.forEach(stat => {
    const element = document.getElementById(stat.id);
    if (element) {
      const formattedValue = stat.format === 'currency' 
        ? formatCurrency(stat.value)
        : stat.value.toLocaleString('en-IN');
      
      // Add animation effect
      element.style.opacity = '0.5';
      setTimeout(() => {
        element.textContent = formattedValue;
        element.style.opacity = '1';
      }, 100);
    }
  });
}

// Enhanced populate top lists with better error handling
function populateTopLists() {
  if (!dashboardData) return;
  
  const lists = [
    { id: 'topProducts', data: dashboardData.topProducts, type: 'product' },
    { id: 'topCategories', data: dashboardData.topCategories, type: 'category' },
    { id: 'topBrands', data: dashboardData.topBrands, type: 'brand' }
  ];
  
  lists.forEach(list => {
    populateList(list.id, list.data, list.type);
  });
}

// Enhanced generic function to populate lists
function populateList(containerId, data, type) {
  const container = document.getElementById(containerId);
  if (!container) {
    console.warn(`Container ${containerId} not found`);
    return;
  }
  
  if (!data || !Array.isArray(data) || data.length === 0) {
    container.innerHTML = '<p class="text-muted text-center py-3">No data available</p>';
    return;
  }

  let html = '';
  data.slice(0, 10).forEach((item, index) => {
    const name = item.name || 'Unknown';
    const sold = item.sold || 0;
    const revenue = item.revenue || 0;
    
    html += `
      <div class="list-item" data-index="${index}">
        <div class="d-flex align-items-center">
          <div class="list-rank">${index + 1}</div>
          <div class="ms-3">
            <h6 class="mb-1" title="${name}">${name}</h6>
            <small class="text-muted">Sold: ${sold.toLocaleString('en-IN')}</small>
          </div>
        </div>
        <div class="text-end">
          <div class="fw-bold">${formatCurrency(revenue)}</div>
          <small class="text-muted">â‚¹${Math.round(revenue / Math.max(sold, 1)).toLocaleString('en-IN')}/unit</small>
        </div>
      </div>
    `;
  });
  
  container.innerHTML = html;
}

// Enhanced chart initialization with better error handling
function initChart() {
  const chartCanvas = document.getElementById('salesChart');
  if (!chartCanvas) {
    console.error('Sales chart canvas not found');
    return;
  }
  
  const ctx = chartCanvas.getContext('2d');
  
  // Destroy existing chart if it exists
  if (salesChart) {
    salesChart.destroy();
    salesChart = null;
  }

  const chartData = getChartData(currentFilter);
  
  if (!chartData.labels.length || !chartData.data.length) {
    console.warn('No chart data available');
    return;
  }
  
  try {
    salesChart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: chartData.labels,
        datasets: [{
          label: 'Sales Revenue',
          data: chartData.data,
          borderColor: '#8B4513',
          backgroundColor: 'rgba(139, 69, 19, 0.1)',
          borderWidth: 3,
          fill: true,
          tension: 0.4,
          pointBackgroundColor: '#8B4513',
          pointBorderColor: '#fff',
          pointBorderWidth: 2,
          pointRadius: 6,
          pointHoverRadius: 8,
          pointHoverBackgroundColor: '#654321',
          pointHoverBorderColor: '#fff',
          pointHoverBorderWidth: 3
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        interaction: {
          intersect: false,
          mode: 'index'
        },
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            backgroundColor: 'rgba(139, 69, 19, 0.95)',
            titleColor: '#fff',
            bodyColor: '#fff',
            borderColor: '#8B4513',
            borderWidth: 1,
            cornerRadius: 8,
            titleFont: {
              size: 14,
              weight: 'bold'
            },
            bodyFont: {
              size: 13
            },
            padding: 12,
            callbacks: {
              label: function(context) {
                return 'Revenue: ' + formatCurrency(context.parsed.y);
              }
            }
          }
        },
        scales: {
          x: {
            grid: {
              display: false
            },
            ticks: {
              color: '#666',
              font: {
                size: 12
              },
              maxTicksLimit: 12 // Prevent overcrowding
            }
          },
          y: {
            grid: {
              color: 'rgba(0,0,0,0.1)',
              borderDash: [2, 2]
            },
            ticks: {
              color: '#666',
              font: {
                size: 12
              },
              callback: function(value) {
                return formatCurrency(value);
              }
            }
          }
        },
        elements: {
          point: {
            hoverBackgroundColor: '#8B4513'
          }
        },
        animation: {
          duration: 1000,
          easing: 'easeInOutQuart'
        }
      }
    });
  } catch (error) {
    console.error('Error initializing chart:', error);
    showError('Failed to initialize sales chart');
  }
}

// Enhanced get chart data with better data processing
function getChartData(filter) {
  if (!dashboardData) {
    return { labels: [], data: [] };
  }

  let sourceData, labels, data;

  try {
    switch (filter) {
      case 'daily':
        sourceData = dashboardData.salesChartData || [];
        if (sourceData.length === 0) {
          return generateSampleData('daily');
        }
        labels = sourceData.map(item => {
          try {
            const date = new Date(item._id);
            return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
          } catch (e) {
            return 'Invalid Date';
          }
        });
        data = sourceData.map(item => item.dailyTotal || 0);
        break;

      case 'weekly':
        sourceData = dashboardData.weeklyData || [];
        if (sourceData.length === 0) {
          return generateSampleData('weekly');
        }
        labels = sourceData.map(item => {
          if (item.x && item.x.includes('-W')) {
            return `Week ${item.x.split('-W')[1]}`;
          }
          return 'Week';
        });
        data = sourceData.map(item => item.y || 0);
        break;

      case 'monthly':
        sourceData = dashboardData.monthlyData || [];
        if (sourceData.length === 0) {
          return generateSampleData('monthly');
        }
        labels = sourceData.map(item => {
          if (item.x && item.x.includes('-')) {
            try {
              const [year, month] = item.x.split('-');
              const date = new Date(year, month - 1);
              return date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });
            } catch (e) {
              return 'Unknown';
            }
          }
          return 'Unknown';
        });
        data = sourceData.map(item => item.y || 0);
        break;

      case 'yearly':
        sourceData = dashboardData.yearlyData || [];
        if (sourceData.length === 0) {
          return generateSampleData('yearly');
        }
        labels = sourceData.map(item => item.x || 'Unknown');
        data = sourceData.map(item => item.y || 0);
        break;

      default:
        return generateSampleData('daily');
    }

    // Validate processed data
    if (labels.length === 0 || data.length === 0 || labels.length !== data.length) {
      console.warn('Processed chart data is invalid, using sample data');
      return generateSampleData(filter);
    }

    return { labels, data };
    
  } catch (error) {
    console.error('Error processing chart data:', error);
    return generateSampleData(filter);
  }
}

// Enhanced change filter function with better UX
function changeFilter(filter) {
  if (currentFilter === filter) return; // No change needed
  
  currentFilter = filter;
  
  // Update button states with loading state
  document.querySelectorAll('.filter-btn').forEach(btn => {
    btn.classList.remove('active');
    btn.disabled = true;
  });
  
  // Find and activate the clicked button
  const clickedButton = Array.from(document.querySelectorAll('.filter-btn'))
    .find(btn => btn.textContent.toLowerCase().trim() === filter.toLowerCase());
  
  if (clickedButton) {
    clickedButton.classList.add('active');
    clickedButton.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>' + clickedButton.textContent;
  }
  
  // Update chart with animation
  try {
    const chartData = getChartData(filter);
    if (salesChart && chartData.labels.length > 0) {
      salesChart.data.labels = chartData.labels;
      salesChart.data.datasets[0].data = chartData.data;
      salesChart.update('active');
    } else {
      initChart();
    }
  } catch (error) {
    console.error('Error updating chart:', error);
    showError('Failed to update chart view');
  }
  
  // Re-enable buttons and restore text
  setTimeout(() => {
    document.querySelectorAll('.filter-btn').forEach(btn => {
      btn.disabled = false;
      btn.innerHTML = btn.textContent.replace(/^\s*/, ''); // Remove spinner
    });
  }, 500);
}

// Enhanced generate ledger function with better validation
async function generateLedger() {
  const periodSelect = document.getElementById('ledgerPeriod');
  if (!periodSelect) {
    showError('Ledger period selector not found');
    return;
  }
  
  const period = periodSelect.value;
  if (!period) {
    showError('Please select a period for the ledger');
    return;
  }
  
  const button = event.target;
  const originalText = button.innerHTML;
  
  // Show loading state
  button.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Generating...';
  button.disabled = true;
  
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 30000);
    
    const response = await fetch('/admin/generate-ledger', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      },
      body: JSON.stringify({ period: period }),
      signal: controller.signal
    });
    
    clearTimeout(timeoutId);
    
    if (!response.ok) {
      if (response.status === 401) {
        window.location.href = '/admin/login';
        return;
      }
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data = await response.json();
    
    if (data.success) {
      showSuccess(`Ledger for ${period.replace('_', ' ')} has been generated successfully!`, 
                  button.closest('.dashboard-card'));
      
      // Log the ledger data for debugging
      console.log('Ledger data:', data.data);
      
    } else {
      throw new Error(data.message || 'Failed to generate ledger');
    }
    
  } catch (error) {
    console.error('Error generating ledger:', error);
    
    if (error.name === 'AbortError') {
      showError('Request timed out. Please try again.', button.closest('.dashboard-card'));
    } else {
      showError(`Failed to generate ledger: ${error.message}`, button.closest('.dashboard-card'));
    }
  } finally {
    // Reset button state
    button.innerHTML = originalText;
    button.disabled = false;
  }
}

// Enhanced auto-refresh functionality
function startAutoRefresh() {
  // Clear existing interval
  if (refreshInterval) {
    clearInterval(refreshInterval);
  }
  
  // Refresh every 5 minutes
  refreshInterval = setInterval(() => {
    console.log('Auto-refreshing dashboard data...');
    loadDashboard();
  }, 5 * 60 * 1000);
}

function stopAutoRefresh() {
  if (refreshInterval) {
    clearInterval(refreshInterval);
    refreshInterval = null;
  }
}

// Enhanced responsive sidebar handling
function toggleSidebar() {
  const sidebar = document.querySelector('.sidebar');
  const overlay = document.querySelector('.sidebar-overlay');
  
  if (!sidebar) return;
  
  if (window.innerWidth <= 768) {
    const isOpen = sidebar.classList.contains('show');
    
    if (isOpen) {
      sidebar.classList.remove('show');
      if (overlay) overlay.classList.remove('show');
    } else {
      sidebar.classList.add('show');
      if (overlay) overlay.classList.add('show');
    }
  }
}

// Enhanced window resize handler
function handleResize() {
  if (window.innerWidth > 768) {
    const sidebar = document.querySelector('.sidebar');
    const overlay = document.querySelector('.sidebar-overlay');
    
    if (sidebar) sidebar.classList.remove('show');
    if (overlay) overlay.classList.remove('show');
  }
  
  // Resize chart if it exists
  if (salesChart) {
    salesChart.resize();
  }
}

// Enhanced click outside handler
function handleClickOutside(event) {
  const sidebar = document.querySelector('.sidebar');
  const overlay = document.querySelector('.sidebar-overlay');
  const toggleButton = document.querySelector('.sidebar-toggle');
  
  if (!sidebar || window.innerWidth > 768) return;
  
  const isClickInsideSidebar = sidebar.contains(event.target);
  const isClickOnToggle = toggleButton && toggleButton.contains(event.target);
  
  if (!isClickInsideSidebar && !isClickOnToggle && sidebar.classList.contains('show')) {
    sidebar.classList.remove('show');
    if (overlay) overlay.classList.remove('show');
  }
}

// Enhanced initialization
function initializeDashboard() {
  console.log('Dashboard page loaded, initializing...');
  
  // Load dashboard data
  loadDashboard();
  
  // Start auto-refresh
  startAutoRefresh();
  
  // Setup event listeners
  window.addEventListener('resize', handleResize);
  document.addEventListener('click', handleClickOutside);
  
  // Handle page visibility change
  document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
      stopAutoRefresh();
    } else {
      startAutoRefresh();
      // Refresh data when page becomes visible again
      loadDashboard();
    }
  });
  
  // Handle online/offline events
  window.addEventListener('online', () => {
    showSuccess('Connection restored. Refreshing data...');
    loadDashboard();
  });
  
  window.addEventListener('offline', () => {
    showError('Connection lost. Data may not be up to date.');
    stopAutoRefresh();
  });
}

// Initialize dashboard when page loads
document.addEventListener('DOMContentLoaded', initializeDashboard);

// Cleanup on page unload
window.addEventListener('beforeunload', () => {
  stopAutoRefresh();
  if (salesChart) {
    salesChart.destroy();
  }
});
  </script>
</body>
</html>