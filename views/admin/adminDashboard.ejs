<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Admin Dashboard - EUPHORIA</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@700&display=swap" rel="stylesheet">
  <link 
    rel="stylesheet" 
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
  />
  <link 
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" 
    rel="stylesheet"
  />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
  
  <style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #a28f87 0%, #432410 100%);
        min-height: 100vh;
    }

    /* Main content */
    .main-content {
        margin-left: 240px;
        margin-top: 80px;
        padding: 30px;
        min-height: calc(100vh - 80px);
        background: linear-gradient(135deg, #a97c50 0%, #5d4037 100%);
    }
    .page-title, h1, h2, h3, h4, h5, h6 {
        color: #4a2c2a;
        font-family: 'Playfair Display', serif;
        font-weight: 800;
        letter-spacing: 1.5px;
        text-shadow: 0 4px 16px rgba(93, 64, 55, 0.10);
        margin-bottom: 0.5rem;
        position: relative;
    }
    .page-title, h1 {
        font-size: 3rem;
        line-height: 1.1;
        color: #4a2c2a;
        background: none;
        display: inline-block;
        padding-bottom: 0.2em;
    }
    .page-title::after, h1::after {
        content: '';
        display: block;
        width: 60px;
        height: 4px;
        background: linear-gradient(90deg, #bfa76a 0%, #a97c50 100%);
        border-radius: 2px;
        margin: 0.3em auto 0 0;
        opacity: 0.7;
    }
    .dashboard-subtitle, .main-content .subtitle, .main-content h2 + p {
        color: #a97c50;
        font-size: 1.25rem;
        font-family: 'Poppins', sans-serif;
        margin-bottom: 2rem;
        font-weight: 500;
        letter-spacing: 0.5px;
    }
    .stats-grid {
        box-shadow: 0 8px 32px rgba(93, 64, 55, 0.10), 0 2px 8px rgba(191, 167, 106, 0.08);
        border-radius: 24px;
        padding: 20px 10px 10px 10px;
        background: rgba(255,255,255,0.10);
        margin-bottom: 40px;
    }
    .dashboard-card {
        background: linear-gradient(135deg, #a97c50 0%, #5d4037 100%);
        color: #fff;
        border-radius: 20px;
        padding: 25px;
        margin-bottom: 25px;
        box-shadow: 0 8px 32px rgba(93, 64, 55, 0.10);
        border: 1px solid #e0c9b6;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        position: relative;
        overflow: hidden;
    }
    .dashboard-card:hover {
        transform: translateY(-5px) scale(1.02);
        box-shadow: 0 16px 48px rgba(93, 64, 55, 0.18);
    }
    .dashboard-card .card-title {
        font-size: 1.2rem;
        color: #ffe6b0;
        font-weight: 700;
        margin-bottom: 8px;
        letter-spacing: 0.5px;
        text-shadow: 0 2px 8px rgba(191, 167, 106, 0.12);
    }
    .dashboard-card .card-value {
        font-size: 2.4rem;
        font-weight: 800;
        color: #fff;
        letter-spacing: 1px;
        text-shadow: 0 2px 8px rgba(93, 64, 55, 0.10);
    }
    .dashboard-card p, .dashboard-card span {
        color: #f7e7d1;
    }
    /* Elegant input styles if any */
    input, select, textarea {
        border-radius: 6px;
        border: 1px solid #e0c9b6;
        padding: 7px 12px;
        font-size: 1rem;
        color: #5d4037;
        background: #f8f4f0;
        transition: border 0.2s;
    }
    input:focus, select:focus, textarea:focus {
        border: 1.5px solid #a97c50;
        outline: none;
    }

    /* Dashboard cards */
    .dashboard-card {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 20px;
        padding: 25px;
        margin-bottom: 25px;
        box-shadow: 0 15px 35px rgba(0,0,0,0.1);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .dashboard-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 25px 50px rgba(0,0,0,0.15);
    }

    /* Stats grid */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        background: linear-gradient(135deg, #97786a 0%, #5C4033 100%);
        color: white;
        padding: 25px;
        border-radius: 15px;
        text-align: center;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        transition: transform 0.3s ease;
    }

    .stat-card:hover {
        transform: scale(1.05);
    }

    .stat-value {
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 5px;
    }

    .stat-label {
        font-size: 0.9rem;
        opacity: 0.9;
    }

    /* Chart container */
    .chart-container {
        position: relative;
        height: 400px;
        margin: 20px 0;
    }

    /* Filter buttons */
    .filter-buttons {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
        flex-wrap: wrap;
    }

    .filter-btn {
        padding: 8px 16px;
        border: none;
        border-radius: 20px;
        background: rgba(92, 64, 51, 0.9);
        color: white;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .filter-btn:hover,
    .filter-btn.active {
        background: #452b1e;
        transform: translateY(-2px);
    }

    /* Top lists */
    .top-list {
        max-height: 400px;
        overflow-y: auto;
    }

    .list-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        margin-bottom: 10px;
        background: #fff;
        border-radius: 10px;
        border-left: 4px solid #5C4033;
        transition: all 0.3s ease;
    }

    .list-item:hover {
        transform: translateX(5px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .list-rank {
        background: #5C4033;
        color: white;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
    }

    /* Buttons */
    .btn-generate {
        background: linear-gradient(135deg, #5C4033 0%, #5C4033 100%);
        border: none;
        color: white;
        padding: 12px 30px;
        border-radius: 25px;
        font-weight: bold;
        transition: all 0.3s ease;
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }

    .btn-generate:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 25px rgba(0,0,0,0.3);
    }

    /* Page titles */
    .page-title {
        color: white;
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 10px;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }

    .page-subtitle {
        color: rgba(255, 255, 255, 0.8);
        font-size: 1.1rem;
        margin-bottom: 30px;
    }

    /* Loading spinner */
    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #5C4033;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 2s linear infinite;
        margin: 20px auto;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    /* Responsive */
    @media (max-width: 768px) {
        .sidebar {
            transform: translateX(-100%);
        }
        .main-content {
            margin-left: 0;
        }
        .stats-grid {
            grid-template-columns: 1fr;
        }
    }

    .error-message {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
        padding: 15px;
        border-radius: 10px;
        margin: 20px 0;
    }
    .sidebar {
        width: 240px !important;
        min-width: 240px !important;
        padding-top: 20px;
    }
    .main-content {
        margin-left: 240px !important;
        width: calc(100% - 240px) !important;
    }
    .nav-menu a {
        font-size: 0.90rem !important;
        padding: 6px 16px !important;
        gap: 8px !important;
        min-height: 28px !important;
        line-height: 1.1 !important;
    }
    .nav-menu i {
        font-size: 1.05rem !important;
        min-width: 20px;
        text-align: center;
    }
    .nav-menu a span, .nav-menu a .menu-text {
        display: inline !important;
        position: static !important;
        background: none !important;
        color: inherit !important;
        padding: 0 !important;
        border-radius: 0 !important;
        box-shadow: none !important;
    }
    .nav-menu a {
        justify-content: flex-start;
    }
    @media (max-width: 992px) {
        .sidebar {
            width: 220px !important;
            min-width: 220px !important;
        }
        .main-content {
            margin-left: 0 !important;
            width: 100% !important;
        }
    }
    .main-content, .main-content p, .main-content span, .main-content div, .main-content td, .main-content th, .main-content label, .main-content li, .main-content a, .main-content input, .main-content select, .main-content textarea {
        color: #5d4037;
    }
  </style>
</head>
<body>
  <%- include('../../views/partials/admin/header') %>
  <div class="main-content">
    <div class="container-fluid">
      <h1 class="page-title">Dashboard</h1>
      <p class="page-subtitle">Your business insights at a glance</p>

      <!-- Loading Spinner -->
      <div id="loadingSpinner" class="spinner"></div>

        <!-- Dashboard Content -->
        <div id="dashboardContent">
          <!-- Statistics Cards -->
          <div class="stats-grid">
            <div class="stat-card">
              <div class="stat-value" id="statRevenue">₹<%= totalRevenue %></div>
              <div class="stat-label">Total Revenue</div>
              <%= totalRevenue %>

            </div>
            <div class="stat-card">
              <div class="stat-value" id="statOrders"><%= totalOrders %></div>
              <div class="stat-label">Total Orders</div>
              <%= totalOrders %>

            </div>
            <div class="stat-card">
              <div class="stat-value" id="statCustomers">0</div>
              <div class="stat-label">Active Customers</div>
              <%= activeCustomers %>

            </div>
            <div class="stat-card">
              <div class="stat-value" id="statSold"><%= productsSold %></div>
              <div class="stat-label">Products Sold</div>
              <%= productsSold %>
            </div>
          </div>

        <!-- Sales Chart -->
        <div class="dashboard-card">
          <div class="d-flex justify-content-between align-items-center mb-3">
            <h3><i class="fas fa-chart-line me-2"></i>Sales Analytics</h3>
            <div class="filter-buttons">
              <button class="filter-btn active" onclick="changeFilter('daily')">Daily</button>
              <button class="filter-btn" onclick="changeFilter('weekly')">Weekly</button>
              <button class="filter-btn" onclick="changeFilter('monthly')">Monthly</button>
              <button class="filter-btn" onclick="changeFilter('yearly')">Yearly</button>
            </div>
          </div>
          <div class="chart-container">
            <canvas id="salesChart"></canvas>
          </div>
        </div>

        <!-- Top Lists -->
        <div class="row">
          <div class="col-lg-4 mb-4">
            <div class="dashboard-card">
              <h4><i class="fas fa-trophy me-2"></i>Top 10 Products</h4>
              <div class="top-list" id="topProducts">
                <p class="text-muted text-center py-3">Loading...</p>
              </div>
            </div>
          </div>
          <div class="col-lg-4 mb-4">
            <div class="dashboard-card">
              <h4><i class="fas fa-tags me-2"></i>Top 10 Categories</h4>
              <div class="top-list" id="topCategories">
                <p class="text-muted text-center py-3">Loading...</p>
              </div>
            </div>
          </div>
          <div class="col-lg-4 mb-4">
            <div class="dashboard-card">
              <h4><i class="fas fa-star me-2"></i>Top Brands</h4>
              <div class="top-list" id="topBrands">
                <p class="text-muted text-center py-3">Loading...</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
  // Initialize dashboard data
let dashboardData = null;
  let salesChart = null;

  // Format currency
function formatCurrency(amount) {
            return new Intl.NumberFormat('en-IN', {
                style: 'currency',
                currency: 'INR',
          minimumFractionDigits: 2
            }).format(amount);
        }

  // Format numbers
        function formatNumber(num) {
            return new Intl.NumberFormat('en-IN').format(num);
        }

  // Show loading state
  function showLoading(show) {
      const spinner = document.getElementById('loadingSpinner');
      const content = document.getElementById('dashboardContent');
      if (spinner && content) {
          spinner.style.display = show ? 'block' : 'none';
          content.style.display = show ? 'none' : 'block';
      }
  }

  // Show error message
  function showError(message, container = document.querySelector('.main-content')) {
      const errorDiv = document.createElement('div');
      errorDiv.className = 'alert alert-danger alert-dismissible fade show';
      errorDiv.innerHTML = `
          ${message}
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      container.insertBefore(errorDiv, container.firstChild);
  }

  // Show success message
  function showSuccess(message, container = document.querySelector('.main-content')) {
      const successDiv = document.createElement('div');
      successDiv.className = 'alert alert-success alert-dismissible fade show';
      successDiv.innerHTML = `
          ${message}
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      container.insertBefore(successDiv, container.firstChild);
  }

            // Update statistics cards
  function updateStats(data) {
      document.getElementById('statRevenue').textContent = formatCurrency(data.totalRevenue);
      document.getElementById('statOrders').textContent = formatNumber(data.totalOrders);
      document.getElementById('statCustomers').textContent = formatNumber(data.activeCustomers);
      document.getElementById('statSold').textContent = formatNumber(data.productsSold);
        }

  // Update top items lists
        function updateTopItems(data) {
            // Update top products
      const productsList = document.getElementById('topProducts');
            if (data.topProducts && data.topProducts.length > 0) {
          productsList.innerHTML = data.topProducts.map((product, index) => `
              <div class="list-item">
                  <div class="d-flex align-items-center">
                      <div class="list-rank">${index + 1}</div>
                      <div class="ms-3">
                          <h6 class="mb-1" title="${product.name}">${product.name}</h6>
                          <small class="text-muted">Sold: ${formatNumber(product.sold)}</small>
                        </div>
                  </div>
                  <div class="text-end">
                      <div class="fw-bold">${formatCurrency(product.revenue)}</div>
                      <small class="text-muted">${formatCurrency(product.revenue / Math.max(product.sold, 1))}/unit</small>
                  </div>
              </div>
                `).join('');
            } else {
          productsList.innerHTML = '<p class="text-muted text-center py-3">No products data available</p>';
            }

            // Update top categories
      const categoriesList = document.getElementById('topCategories');
            if (data.topCategories && data.topCategories.length > 0) {
          categoriesList.innerHTML = data.topCategories.map((category, index) => `
              <div class="list-item">
                  <div class="d-flex align-items-center">
                      <div class="list-rank">${index + 1}</div>
                      <div class="ms-3">
                          <h6 class="mb-1" title="${category.name}">${category.name}</h6>
                          <small class="text-muted">Sold: ${formatNumber(category.sold)}</small>
                        </div>
                  </div>
                  <div class="text-end">
                      <div class="fw-bold">${formatCurrency(category.revenue)}</div>
                      <small class="text-muted">${formatCurrency(category.revenue / Math.max(category.sold, 1))}/unit</small>
                  </div>
              </div>
                `).join('');
            } else {
          categoriesList.innerHTML = '<p class="text-muted text-center py-3">No categories data available</p>';
            }

            // Update top brands
      const brandsList = document.getElementById('topBrands');
            if (data.topBrands && data.topBrands.length > 0) {
          brandsList.innerHTML = data.topBrands.map((brand, index) => `
              <div class="list-item">
                  <div class="d-flex align-items-center">
                      <div class="list-rank">${index + 1}</div>
                      <div class="ms-3">
                          <h6 class="mb-1" title="${brand.name}">${brand.name}</h6>
                          <small class="text-muted">Sold: ${formatNumber(brand.sold)}</small>
                        </div>
                  </div>
                  <div class="text-end">
                      <div class="fw-bold">${formatCurrency(brand.revenue)}</div>
                      <small class="text-muted">${formatCurrency(brand.revenue / Math.max(brand.sold, 1))}/unit</small>
                  </div>
              </div>
                `).join('');
            } else {
          brandsList.innerHTML = '<p class="text-muted text-center py-3">No brands data available</p>';
            }
        }

  // Initialize sales chart
  function initChart(data, filter = 'daily') {
      const ctx = document.getElementById('salesChart').getContext('2d');
      
      if (salesChart) {
          salesChart.destroy();
      }

      let chartData;
      switch (filter) {
        case 'daily':
          chartData = data.salesChartData;
          break;
        case 'weekly':
          chartData = data.weeklyData;
          break;
        case 'monthly':
          chartData = data.monthlyData;
          break;
        case 'yearly':
          chartData = data.yearlyData;
          break;
        default:
          chartData = data.salesChartData;
          break;
      }

      salesChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: chartData.map(item => item.x),
          datasets: [{
            label: 'Sales',
            data: chartData.map(item => item.y),
            borderColor: '#5C4033',
            backgroundColor: 'rgba(92, 64, 51, 0.1)',
            tension: 0.4,
            fill: true
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  return formatCurrency(context.raw);
                }
              }
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                callback: function(value) {
                  return formatCurrency(value);
                }
              }
            }
          }
        }
      });
  }

  // Change chart filter
  function changeFilter(filter) {
      if (!dashboardData) return;
      
      // Update active button
      document.querySelectorAll('.filter-btn').forEach(btn => {
          btn.classList.remove('active');
          if (btn.textContent.toLowerCase() === filter) {
              btn.classList.add('active');
          }
      });
      
      initChart(dashboardData, filter);
  }

  // Load dashboard data
  async function loadDashboardData() {
      try {
          showLoading(true);
          console.log('Fetching dashboard data...');
          
          const response = await fetch('/admin/dashboard-data', {
              method: 'GET',
              headers: {
                  'Content-Type': 'application/json',
                  'X-Requested-With': 'XMLHttpRequest'
          }
        });
        
          if (!response.ok) {
              if (response.status === 401) {
                  window.location.href = '/admin/login';
                  return;
              }
              throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          const data = await response.json();
          
          if (data.success) {
              console.log('Dashboard data loaded successfully:', data);
              dashboardData = data;
              
              // Update UI components
              updateStats(data);
              updateTopItems(data);
              initChart(data);
              
              // Show dashboard content
              document.getElementById('dashboardContent').style.display = 'block';
          } else {
              throw new Error(data.message || 'Failed to load dashboard data');
          }
      } catch (error) {
          console.error('Error loading dashboard data:', error);
          showError(`Failed to load dashboard data: ${error.message}`);
          
          // Show dashboard with empty state
          document.getElementById('dashboardContent').style.display = 'block';
          updateStats({
              totalRevenue: 0,
              totalOrders: 0,
              activeCustomers: 0,
              productsSold: 0
          });
          updateTopItems({
              topProducts: [],
              topCategories: [],
              topBrands: []
          });
      } finally {
          showLoading(false);
      }
  }

  // Refresh dashboard data
  async function refreshDashboard() {
      const refreshBtn = document.querySelector('.refresh-btn');
      const refreshText = document.getElementById('refreshText');
      
      if (refreshBtn && refreshText) {
          refreshBtn.disabled = true;
          refreshText.textContent = 'Refreshing...';
          
          try {
              await loadDashboardData();
              refreshText.textContent = 'Data Refreshed!';
              
              setTimeout(() => {
                  refreshText.textContent = 'Refresh Data';
                  refreshBtn.disabled = false;
              }, 2000);
  } catch (error) {
              refreshText.textContent = 'Refresh Data';
              refreshBtn.disabled = false;
              showError('Failed to refresh dashboard data');
          }
      }
  }

  // Load dashboard data when page loads
  document.addEventListener('DOMContentLoaded', function() {
      console.log('Dashboard page loaded, fetching data...');
      loadDashboardData();
  });

  // Auto-refresh every 5 minutes
  setInterval(loadDashboardData, 300000);

  // Enhanced auto-refresh functionality
  function startAutoRefresh() {
    // Clear existing interval
    if (refreshInterval) {
      clearInterval(refreshInterval);
    }
    
    // Refresh every 5 minutes
    refreshInterval = setInterval(() => {
      console.log('Auto-refreshing dashboard data...');
      loadDashboardData();
    }, 5 * 60 * 1000);
  }

  function stopAutoRefresh() {
    if (refreshInterval) {
      clearInterval(refreshInterval);
      refreshInterval = null;
    }
  }

  // Enhanced responsive sidebar handling
  function toggleSidebar() {
    const sidebar = document.querySelector('.sidebar');
    const overlay = document.querySelector('.sidebar-overlay');
    
    if (!sidebar) return;
    
    if (window.innerWidth <= 768) {
      const isOpen = sidebar.classList.contains('show');
      
      if (isOpen) {
        sidebar.classList.remove('show');
        if (overlay) overlay.classList.remove('show');
      } else {
        sidebar.classList.add('show');
        if (overlay) overlay.classList.add('show');
      }
    }
  }

  // Enhanced window resize handler
  function handleResize() {
    if (window.innerWidth > 768) {
      const sidebar = document.querySelector('.sidebar');
      const overlay = document.querySelector('.sidebar-overlay');
      
      if (sidebar) sidebar.classList.remove('show');
      if (overlay) overlay.classList.remove('show');
    }
    
    // Resize chart if it exists
    if (salesChart) {
      salesChart.resize();
    }
  }

  // Enhanced click outside handler
  function handleClickOutside(event) {
    const sidebar = document.querySelector('.sidebar');
    const overlay = document.querySelector('.sidebar-overlay');
    const toggleButton = document.querySelector('.sidebar-toggle');
    
    if (!sidebar || window.innerWidth > 768) return;
    
    const isClickInsideSidebar = sidebar.contains(event.target);
    const isClickOnToggle = toggleButton && toggleButton.contains(event.target);
    
    if (!isClickInsideSidebar && !isClickOnToggle && sidebar.classList.contains('show')) {
      sidebar.classList.remove('show');
      if (overlay) overlay.classList.remove('show');
    }
  }

  // Enhanced initialization
  function initializeDashboard() {
    console.log('Dashboard page loaded, initializing...');
    
    // Load dashboard data
        loadDashboardData();
    
    // Start auto-refresh
    startAutoRefresh();
    
    // Setup event listeners
    window.addEventListener('resize', handleResize);
    document.addEventListener('click', handleClickOutside);
    
    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        stopAutoRefresh();
      } else {
        startAutoRefresh();
        // Refresh data when page becomes visible again
                loadDashboardData();
      }
    });
    
    // Handle online/offline events
    window.addEventListener('online', () => {
      showSuccess('Connection restored. Refreshing data...');
            loadDashboardData();
    });
    
    window.addEventListener('offline', () => {
      showError('Connection lost. Data may not be up to date.');
      stopAutoRefresh();
    });
  }

  // Initialize dashboard when page loads
  document.addEventListener('DOMContentLoaded', initializeDashboard);

  // Cleanup on page unload
  window.addEventListener('beforeunload', () => {
    stopAutoRefresh();
    if (salesChart) {
      salesChart.destroy();
    }
  });
</script>
</body>
</html>