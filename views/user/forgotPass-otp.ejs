<style>
    body {
        background-color: #f4f1ec;
        font-family: 'Poppins', sans-serif;
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
        overflow-x: hidden;
        overflow: hidden; /* âœ… Prevents both horizontal & vertical scroll */

    }

    .otp-wrapper {
        width: 100%;
        max-width: 480px;
        margin: 0 auto;
    }

    .otp-container {
        background: #ffffff;
        border-radius: 15px;
        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.2);
        padding: 35px;
        transition: all 0.3s ease;
    }

    .otp-container:hover {
        box-shadow: 0px 8px 25px rgba(0, 0, 0, 0.3);
    }

    .otp-container h3 {
        font-size: 24px;
        font-weight: bold;
        color: #5a3d2b;
        margin-bottom: 25px;
        text-align: center;
        position: relative;
        padding-bottom: 15px;
    }

    .otp-container h3:after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 50px;
        height: 3px;
        background-color: #8b5e3c;
        border-radius: 3px;
    }

    .form-group {
        margin-bottom: 25px;
    }

    .form-group label {
        display: block;
        font-weight: 500;
        color: #5a3d2b;
        margin-bottom: 10px;
    }

    .otp-input-group {
        display: flex;
        gap: 10px;
        justify-content: center;
        margin-bottom: 20px;
    }

    .otp-input {
        width: 50px;
        height: 50px;
        padding: 10px;
        font-size: 20px;
        text-align: center;
        border: 1px solid #5b2d0f;
        border-radius: 8px;
        background: white;
        transition: all 0.3s ease;
    }

    .otp-input:focus {
        border-color: #8b5e3c;
        box-shadow: 0 0 5px rgba(139, 94, 60, 0.3);
        outline: none;
    }

    .btn-primary {
        background-color: #8b5e3c;
        border: none;
        padding: 12px;
        font-size: 16px;
        font-weight: 600;
        border-radius: 8px;
        transition: all 0.3s ease;
        width: 100%;
        color: white;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .btn-primary:hover {
        background-color: #6d4a31;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(139, 94, 60, 0.4);
    }

    .btn-primary:active {
        transform: translateY(0);
    }

    .otp-timer {
        text-align: center;
        color: #5a3d2b;
        margin: 15px 0;
        font-size: 14px;
    }

    .resend-btn {
        background: none;
        border: none;
        color: #8b5e3c;
        text-decoration: underline;
        cursor: pointer;
        font-size: 14px;
        display: block;
        margin: 10px auto;
        transition: all 0.3s ease;
    }

    .resend-btn:hover {
        color: #6d4a31;
    }

    .alert {
        padding: 12px 15px;
        border-radius: 8px;
        margin-top: 20px;
        text-align: center;
        font-size: 14px;
        animation: fadeIn 0.5s ease;
    }

    .alert-danger {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
    }

    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
    }

    @media (max-width: 576px) {
        .otp-container {
            padding: 25px;
        }
        
        .otp-input {
            width: 45px;
            height: 45px;
            font-size: 18px;
        }
    }
</style>

<div class="otp-wrapper">
    <div class="otp-container">
        <h3>Email Verification</h3>
        <form id="otpForm" onsubmit="return validateOTPForm(event)">
            <div class="form-group">
                <label for="otp">Enter OTP:</label>
                <div class="otp-input-group">
                    <input type="text" maxlength="1" class="otp-input" required>
                    <input type="text" maxlength="1" class="otp-input" required>
                    <input type="text" maxlength="1" class="otp-input" required>
                    <input type="text" maxlength="1" class="otp-input" required>
                    <input type="text" maxlength="1" class="otp-input" required>
                    <input type="text" maxlength="1" class="otp-input" required>
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Verify OTP</button>
            <div class="otp-timer">
                <span id="otpTimer">OTP Expires in: 1:00</span>
            </div>
            <button type="button" onclick="resendOTP()" class="resend-btn">Resend OTP</button>
            <% if (locals.message && message.length > 0) { %>
                <div class="alert alert-danger">
                    <%= message %>
                </div>
            <% } %>
        </form>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    let timerInterval;
    let remainingTime = 60; // 1 minute timer
    const resendButton = document.querySelector('.resend-btn');
    const timerElement = document.getElementById('otpTimer');

    function startOTPTimer() {
        // Disable resend button initially
        resendButton.disabled = true;
        resendButton.style.opacity = '0.5';
        resendButton.style.cursor = 'not-allowed';
        
        // Reset timer
        remainingTime = 60;
        updateTimerDisplay();

        // Clear any existing interval
        if (timerInterval) {
            clearInterval(timerInterval);
        }

        // Start new interval
        timerInterval = setInterval(() => {
            remainingTime--;
            updateTimerDisplay();

            if (remainingTime <= 0) {
                clearInterval(timerInterval);
                enableResendButton();
            }
        }, 1000);
    }

    function updateTimerDisplay() {
        const minutes = Math.floor(remainingTime / 60);
        const seconds = remainingTime % 60;
        timerElement.textContent = `OTP Expires in: ${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
    }

    function enableResendButton() {
        resendButton.disabled = false;
        resendButton.style.opacity = '1';
        resendButton.style.cursor = 'pointer';
        timerElement.textContent = 'OTP Expired';
    }

    function resendOTP() {
        if (resendButton.disabled) return;

        // Show loading state
        resendButton.disabled = true;
        resendButton.style.opacity = '0.5';
        resendButton.style.cursor = 'not-allowed';
        resendButton.textContent = 'Sending...';

        $.ajax({
            type: 'POST',
            url: '/resend-forgot-otp',
            success: function (response) {
                if (response.success) {
                    // Clear OTP input fields
                    document.querySelectorAll('.otp-input').forEach(input => {
                        input.value = '';
                    });
                    
                    // Start new timer
                    startOTPTimer();
                    
                    Swal.fire({
                        icon: 'success',
                        title: 'OTP Resent',
                        text: 'Please check your email for the new OTP',
                        timer: 2000,
                        showConfirmButton: false
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: response.message || 'Failed to resend OTP. Please try again.'
                    });
                    enableResendButton();
                }
            },
            error: function () {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Error occurred while resending OTP. Please try again.'
                });
                enableResendButton();
            }
        });
    }

    function validateOTPForm(event) {
        event.preventDefault();
        
        // Collect OTP from input fields
        const otpInputs = document.querySelectorAll(".otp-input");
        let otpValue = "";
        otpInputs.forEach(input => {
            otpValue += input.value;
        });

        // Ensure OTP is 6 digits
        if (otpValue.length !== 6) {
            Swal.fire({
                icon: "error",
                title: "Invalid OTP",
                text: "Please enter all 6 digits of the OTP"
            });
            return false;
        }

        // Show loading state
        const submitButton = document.querySelector('button[type="submit"]');
        const originalText = submitButton.textContent;
        submitButton.disabled = true;
        submitButton.textContent = "Verifying...";

        // AJAX Request
        $.ajax({
            type: "POST",
            url: "/verify-passForgot-otp",
            data: { otp: otpValue },
            success: function (response) {
                console.log("Response:", response); // Debug log
                if (response.success) {
                    Swal.fire({
                        icon: "success",
                        title: "Success",
                        text: response.message,
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        console.log("Redirecting to:", response.redirectUrl); // Debug log
                        window.location.href = response.redirectUrl;
                    });
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Error",
                        text: response.message
                    });
                    submitButton.disabled = false;
                    submitButton.textContent = originalText;
                }
            },
            error: function (xhr) {
                console.error("Error response:", xhr); // Debug log
                const response = xhr.responseJSON || {};
                Swal.fire({
                    icon: "error",
                    title: "Error",
                    text: response.message || "Something went wrong. Please try again."
                });
                submitButton.disabled = false;
                submitButton.textContent = originalText;
            }
        });
        return false;
    }

    // Add event listeners for OTP input fields
    document.addEventListener('DOMContentLoaded', function() {
        const otpInputs = document.querySelectorAll('.otp-input');
        
        otpInputs.forEach((input, index) => {
            // Handle input
            input.addEventListener('input', function() {
                if (this.value.length === 1) {
                    if (index < otpInputs.length - 1) {
                        otpInputs[index + 1].focus();
                    }
                }
            });
            
            // Handle backspace
            input.addEventListener('keydown', function(e) {
                if (e.key === 'Backspace' && !this.value && index > 0) {
                    otpInputs[index - 1].focus();
                }
            });
        });
    });

    // Start the timer when the page loads
    startOTPTimer();
</script>

