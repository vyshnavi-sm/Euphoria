<%- include("../../views/partials/user/header") %>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Checkout - Your Store</title>
  <link href="https://fonts.googleapis.com/css2?family=Cormorant+Garamond:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700&family=Montserrat:wght@300;400;500&display=swap" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
  <style>
    /* Navbar styles with brown text and icons */
    .navbar {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 15px 30px;
      background-color: white;
    }

    .nav-left {
      display: flex;
      align-items: center;
      gap: 02px;
    }

    .brand-name {
      color: #5C4033;
      font-weight: bold;
      font-size: 24px;
      letter-spacing: 1px;
      margin-right: 20px;
      font-family: 'Cormorant Garamond', serif;
    }

    .nav-links {
      display: flex;
      gap: 20px;
      align-items: center;
    }

    .nav-links a {
      text-decoration: none;
      color: #5C4033;
      font-family: 'Cormorant Garamond', serif;
      font-size: 16px;
      font-weight: 500;
      letter-spacing: 0.5px;
    }

    .nav-right {
      display: flex;
      align-items: center;
      gap: 15px;
      margin-right: 40px;
    }

    .dropdown {
      position: relative;
      display: inline-block;
    }

    .dropdown-content {
      display: none;
      position: absolute;
      background-color: white;
      min-width: 160px;
      box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
      z-index: 1000;
      right: 0;
    }

    .dropdown-content a {
      color: #5C4033;
      padding: 12px 16px;
      text-decoration: none;
      display: block;
      width: 100%;
    }

    .dropdown-content a:hover {
      background-color: #f1f1f1;
    }

    .dropdown:hover .dropdown-content {
      display: block;
    }

    .divider {
      color: #5C4033;
    }

    .sign-in-link {
      text-decoration: none;
      color: #5C4033;
      font-family: 'Cormorant Garamond', serif;
      font-size: 16px;
      font-weight: 500;
    }

    .nav-right a {
      text-decoration: none;
      color: #5C4033;
      font-family: 'Cormorant Garamond', serif;
    }

    /* All existing CSS styles remain the same */
    :root {
      --primary-color: #5D4037;
      --primary-light: #8B6B61;
      --primary-dark: #321911;
      --accent-color: #D7CCC8;
      --accent-dark: #A1887F;
      --text-light: #F5F5F5;
      --text-dark: #3E2723;
      --background-light: #EFEBE9;
      --gold: #D4AF37;
    }
    
    body {
      background-color: var(--background-light);
      font-family: 'Cormorant Garamond', serif;
      color: var(--text-dark);
      line-height: 1.6;
    }
    
    .checkout-container {
      max-width: 950px;
      margin: 80px auto 50px;
      background: #fff;
      border-radius: 15px;
      box-shadow: 0 15px 35px rgba(50, 25, 17, 0.1);
      padding: 0;
      overflow: hidden;
    }
    
    .checkout-header {
      background-color: var(--primary-color);
      color: var(--text-light);
      padding: 20px 30px;
      text-align: center;
      border-bottom: 3px solid var(--gold);
    }
    
    .checkout-content {
      padding: 30px;
    }

    .section-title {
      font-size: 32px;
      color: var(--text-light);
      margin-bottom: 0;
      font-family: 'Playfair Display', serif;
      letter-spacing: 1px;
    }
    
    .section-subtitle {
      font-size: 14px;
      color: var(--accent-color);
      font-family: 'Montserrat', sans-serif;
      text-transform: uppercase;
      letter-spacing: 2px;
    }

    .section-heading {
      font-family: 'Playfair Display', serif;
      color: var(--primary-color);
      margin-bottom: 20px;
      font-size: 22px;
      position: relative;
      padding-bottom: 10px;
      font-weight: 600;
    }
    
    .section-heading::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 60px;
      height: 2px;
      background-color: var(--gold);
    }

    .address-card {
      border: 1px solid #e0d6d1;
      border-radius: 8px;
      padding: 18px;
      margin-bottom: 15px;
      background-color: #fff;
      transition: all 0.3s ease;
      position: relative;
    }

    .address-card:hover {
      box-shadow: 0 5px 15px rgba(62, 39, 35, 0.1);
    }

    .default-address {
      border: 2px solid var(--gold);
      background-color: rgba(212, 175, 55, 0.05);
    }
    
    .default-address::before {
      content: '';
      position: absolute;
      top: -10px;
      right: 20px;
      width: 0; 
      height: 0; 
      border-left: 10px solid transparent;
      border-right: 10px solid transparent;
      border-bottom: 10px solid var(--gold);
    }

    .product-item {
      display: flex;
      align-items: center;
      margin-bottom: 15px;
      padding: 15px;
      border: 1px solid #e0d6d1;
      border-radius: 10px;
      background-color: #fff;
      transition: all 0.3s ease;
    }
    
    .product-item:hover {
      box-shadow: 0 5px 15px rgba(62, 39, 35, 0.05);
    }

    .product-item img {
      width: 80px;
      height: 80px;
      object-fit: cover;
      border-radius: 8px;
      margin-right: 20px;
      border: 1px solid #e0d6d1;
    }

    .product-info {
      flex-grow: 1;
    }
    
    .product-name {
      font-family: 'Playfair Display', serif;
      font-size: 18px;
      margin-bottom: 5px;
    }
    
    .product-price {
      font-weight: 600;
      color: var(--primary-color);
    }

    .price-summary {
      border-top: 1px solid #e0d6d1;
      margin-top: 25px;
      padding-top: 20px;
    }

    .summary-line {
      display: flex;
      justify-content: space-between;
      margin-bottom: 12px;
      font-size: 16px;
    }
    
    .summary-total {
      font-family: 'Playfair Display', serif;
      font-size: 20px;
      font-weight: 600;
      color: var(--primary-color);
      margin-top: 10px;
      padding-top: 10px;
      border-top: 1px dashed #e0d6d1;
    }

    .btn-brown {
      background-color: var(--primary-color);
      color: var(--text-light);
      border: none;
      padding: 12px 25px;
      border-radius: 8px;
      font-weight: 500;
      font-family: 'Montserrat', sans-serif;
      transition: 0.3s;
      letter-spacing: 1px;
      text-transform: uppercase;
      font-size: 14px;
    }

    .btn-brown:hover {
      background-color: var(--primary-dark);
      color: var(--text-light);
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(62, 39, 35, 0.2);
    }
    
    .btn-sm {
      padding: 6px 12px;
      font-size: 12px;
    }

    .btn-link-brown {
      color: var(--primary-color);
      text-decoration: none;
      font-size: 14px;
      margin-left: 10px;
      cursor: pointer;
      background: none;
      border: none;
      padding: 0;
      transition: 0.3s;
      font-family: 'Montserrat', sans-serif;
      position: relative;
    }

    .btn-link-brown::after {
      content: '';
      position: absolute;
      width: 0;
      height: 1px;
      bottom: -2px;
      left: 0;
      background-color: var(--primary-color);
      transition: width 0.3s;
    }
    
    .btn-link-brown:hover::after {
      width: 100%;
    }

    .badge-gold {
      background-color: var(--gold);
      color: var(--text-dark);
      font-size: 11px;
      padding: 5px 10px;
      border-radius: 4px;
      margin-right: 10px;
      font-family: 'Montserrat', sans-serif;
      text-transform: uppercase;
      letter-spacing: 1px;
      font-weight: 500;
    }
    
    .address-selection, .order-summary, .payment-method {
      margin-bottom: 40px;
      padding-bottom: 25px;
      position: relative;
    }
    
    .address-selection::after, .order-summary::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 50%;
      transform: translateX(-50%);
      width: 80%;
      height: 1px;
      background: radial-gradient(ellipse at center, #e0d6d1 0%, transparent 80%);
    }
    
    .form-check-input:checked {
      background-color: var(--primary-color);
      border-color: var(--primary-color);
    }
    
    .payment-option {
      border: 1px solid #e0d6d1;
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 15px;
      transition: all 0.3s ease;
    }
    
    .payment-option:hover, .payment-option-selected {
      border-color: var(--primary-color);
      background-color: rgba(93, 64, 55, 0.05);
    }
    
    .payment-option label {
      display: flex;
      align-items: center;
      width: 100%;
      cursor: pointer;
      margin: 0;
    }
    
    .payment-icon {
      width: 30px;
      height: 30px;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--primary-light);
      color: white;
      border-radius: 50%;
      margin-right: 15px;
      font-size: 14px;
    }
    
    .payment-title {
      font-weight: 600;
      font-family: 'Playfair Display', serif;
      font-size: 16px;
    }
    
    .order-button-container {
      margin-top: 30px;
    }
    
    .address-card-content {
      padding-left: 10px;
    }
    
    .address-name {
      font-family: 'Playfair Display', serif;
      font-weight: 600;
      font-size: 18px;
      margin-bottom: 5px;
    }
    
    .address-details {
      font-family: 'Montserrat', sans-serif;
      font-size: 14px;
      color: #666;
      margin-bottom: 3px;
    }
    
    .address-actions {
      margin-top: 12px;
      display: flex;
      gap: 10px;
    }

    .btn-edit {
      background-color: var(--primary-light);
      color: var(--text-light);
      border: none;
      padding: 6px 12px;
      border-radius: 4px;
      font-size: 12px;
      font-family: 'Montserrat', sans-serif;
      transition: all 0.3s ease;
    }

    .btn-edit:hover {
      background-color: var(--primary-dark);
      color: var(--text-light);
    }

    .coupon-invalid {
      filter: blur(1px);
      opacity: 0.7;
      pointer-events: none;
    }
    
    .coupon-invalid:hover {
      filter: blur(1px);
    }

    .payment-option.disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }
    
    .payment-option.disabled label {
      cursor: not-allowed;
    }
    
    .text-danger {
      color: #dc3545;
      font-size: 0.8em;
      margin-left: 5px;
    }

    /* New styles for delivery charge */
    .free-delivery-note {
      background-color: rgba(212, 175, 55, 0.1);
      border: 1px solid var(--gold);
      border-radius: 6px;
      padding: 8px 12px;
      margin-top: 10px;
      font-size: 14px;
      color: var(--primary-color);
      font-family: 'Montserrat', sans-serif;
    }

    .delivery-charge-note {
      background-color: rgba(93, 64, 55, 0.1);
      border: 1px solid var(--primary-light);
      border-radius: 6px;
      padding: 8px 12px;
      margin-top: 10px;
      font-size: 14px;
      color: var(--primary-color);
      font-family: 'Montserrat', sans-serif;
    }
  </style>
</head>
<body>
  <div class="checkout-container">
    <div class="checkout-header">
      <p class="section-subtitle">Complete Your Purchase</p>
      <h2 class="section-title">Checkout</h2>
    </div>
    
    <div class="checkout-content" data-addresses='<%- JSON.stringify(addresses || []) %>'>
      <div class="address-selection">
        <h2 class="section-heading">Select Delivery Address</h2>
        <% if (addresses && addresses.length > 0) { %>
            <% addresses.forEach((address, index) => { %>
                <div class="address-card <%= address.isDefault ? 'default-address' : '' %>">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="selectedAddress" 
                               value="<%= index %>" id="address<%= index %>"
                               <%= address.isDefault ? 'checked' : '' %>>
                        <div class="address-card-content">
                            <h5 class="address-name"><%= address.name %></h5>
                            <p class="address-details"><%= address.addressType %></p>
                            <p class="address-details"><%= address.city %>, <%= address.state %> - <%= address.pincode %></p>
                            <p class="address-details">Phone: <%= address.phone %></p>
                            <div class="address-actions">
                                <% if (address.isDefault) { %>
                                    <span class="badge-gold">Default Address</span>
                                <% } %>
                                <button class="btn-edit" onclick="editAddress('<%= address._id %>')">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            <% }); %>
        <% } else { %>
            <div class="alert alert-info">
                No addresses found. Please add an address to continue.
            </div>
        <% } %>
        <button type="button" class="btn btn-brown mt-3" onclick="window.location.href='/addAddress?redirect=checkout'">
            <i class="fas fa-plus"></i> Add New Address
        </button>
      </div>

      <div class="order-summary">
        <h5 class="section-heading">Order Summary</h5>
        <% if (cart && cart.items && cart.items.length > 0) { %>
          <% cart.items.forEach(item => { %>
            <div class="product-item">
              <% if (item.productId && item.productId.productImage && item.productId.productImage.length > 0) { %>
                <img src="<%= item.productId.productImage[0] %>" alt="<%= item.productId.productName %>">
              <% } else { %>
                <img src="/images/default-product.jpg" alt="Product Image">
              <% } %>
              <div class="product-info">
                <h6 class="product-name"><%= item.productId.productName %></h6>
                <p class="text-muted mb-1">Quantity: <%= item.quantity %></p>
                <p class="product-price">₹<%= item.totalPrice.toFixed(2) %></p>
              </div>
            </div>
          <% }) %>

          <div class="coupon-section mb-4">
            <div class="input-group">
              <input type="text" class="form-control" id="couponCode" placeholder="Enter coupon code" 
                     value="<%= appliedCoupon ? appliedCoupon.code : '' %>" 
                     <%= appliedCoupon ? 'readonly' : '' %>>
              <% if (!appliedCoupon) { %>
                <button class="btn btn-brown" type="button" id="applyCouponBtn">Apply</button>
              <% } else { %>
                <button class="btn btn-danger" type="button" id="removeCouponBtn">Remove</button>
              <% } %>
            </div>
            <div id="couponMessage" class="mt-2"></div>
          </div>

          <% if (availableCoupons && availableCoupons.length > 0) { %>
            <div class="available-coupons-section mt-4">
              <h6 class="section-heading" style="font-size: 18px; margin-bottom: 15px;">Available Coupons</h6>
              <ul class="list-group">
                <% availableCoupons.forEach(coupon => { 
                  const isValid = coupon.minOrderAmount <= subtotal;
                %>
                  <li class="list-group-item d-flex justify-content-between align-items-center <%= !isValid ? 'coupon-invalid' : '' %>">
                    <div class="<%= !isValid ? 'text-muted' : '' %>">
                      <strong><%= coupon.code %></strong>
                      - <%= coupon.discountType === 'percentage' ? coupon.discountValue + '%' : '₹' + coupon.discountValue.toFixed(2) %> off
                      <% if (coupon.minOrderAmount > 0) { %>
                        <small class="text-muted">(Min. order: ₹<%= coupon.minOrderAmount.toFixed(2) %>)</small>
                      <% } %>
                      <% if (coupon.maxDiscountAmount !== null) { %>
                          <small class="text-muted">(Max. discount: ₹<%= coupon.maxDiscountAmount.toFixed(2) %>)</small>
                      <% } %>
                    </div>
                    <button class="btn btn-sm <%= isValid ? 'btn-outline-secondary' : 'btn-outline-secondary disabled' %> apply-available-coupon" 
                            data-coupon-code="<%= coupon.code %>"
                            <%= !isValid ? 'disabled' : '' %>>
                      Apply
                    </button>
                  </li>
                <% }) %>
              </ul>
            </div>
          <% } %>

          <div class="price-summary">
            <div class="summary-line">
              <span>Subtotal</span>
              <span>₹<%= subtotal.toFixed(2) %></span>
            </div>
            
            <%
              // Calculate delivery charge - free for orders >= 1000, otherwise 50
              const deliveryCharge = (subtotal - (discount || 0)) >= 1000 ? 0 : 50;
              const finalTotal = subtotal + (taxes || 0) - (discount || 0) + deliveryCharge;
            %>
            
            <div class="summary-line">
              <span>Delivery Charge</span>
              <span>
                <% if (deliveryCharge === 0) { %>
                  <span style="text-decoration: line-through; color: #999;">₹50</span> FREE
                <% } else { %>
                  ₹<%= deliveryCharge.toFixed(2) %>
                <% } %>
              </span>
            </div>
            
            <div class="summary-line">
              <span>Taxes</span>
              <span>₹<%= (taxes || 0).toFixed(2) %></span>
            </div>
            
            <% if (discount > 0) { %>
              <div class="summary-line">
                <span>Discount</span>
                <span>- ₹<%= discount.toFixed(2) %></span>
              </div>
            <% } %>
            
            <div class="summary-total">
              <span>Total</span>
              <span>₹<%= finalTotal.toFixed(2) %></span>
            </div>
            
            <!-- Delivery charge notes -->
            <% if (deliveryCharge === 0) { %>
              <div class="free-delivery-note">
                <i class="fas fa-truck"></i> Congratulations! You get FREE delivery on this order.
              </div>
            <% } else { %>
              <div class="delivery-charge-note">
                <i class="fas fa-info-circle"></i> Add ₹<%= (1000 - (subtotal - (discount || 0))).toFixed(2) %> more to get FREE delivery!
              </div>
            <% } %>
          </div>
        <% } else { %>
          <div class="alert alert-warning">
            <p>Your cart is empty. Please add products to continue.</p>
          </div>
        <% } %>
      </div>

      <div class="payment-method">
        <h5 class="section-heading">Payment Method</h5>
        <div class="payment-options">
          <%
            // Update total for payment method validation
            const totalWithDelivery = subtotal + (taxes || 0) - (discount || 0) + deliveryCharge;
          %>
          <div class="payment-option <%= totalWithDelivery > 1000 ? 'disabled' : '' %>">
            <input type="radio" name="paymentMethod" id="cod" value="cod" <%= totalWithDelivery > 1000 ? 'disabled' : '' %>>
            <label for="cod">
              <i class="fas fa-money-bill-wave"></i>
              Cash on Delivery
              <% if (totalWithDelivery > 1000) { %>
                <span class="text-danger">(Not available for orders above ₹1000)</span>
              <% } %>
            </label>
          </div>
          <div class="payment-option">
            <input type="radio" name="paymentMethod" id="razorpay" value="razorpay" checked>
            <label for="razorpay">
              <i class="fas fa-credit-card"></i>
             Razorpay Payment
            </label>
          </div>
          <div class="payment-option">
            <input type="radio" name="paymentMethod" id="wallet" value="wallet">
            <label for="wallet">
              <i class="fas fa-wallet"></i>
              Wallet
              <span class="wallet-balance" style="margin-left: 10px; color: var(--primary-color);">
                (Balance: ₹<%= !isNaN(Number(user.wallet)) ? Number(user.wallet).toFixed(2) : '0.00' %>)
              </span>
            </label>
          </div>
        </div>
      </div>

      <div class="order-button-container">
        <button type="button" class="btn btn-brown w-100" id="placeOrderBtn">Complete Order</button>
      </div>
    </div>
  </div>

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <script>
    const userAddresses = JSON.parse(document.querySelector('.checkout-content').dataset.addresses);
    
    console.log("Available addresses:", userAddresses);

    document.getElementById('placeOrderBtn').addEventListener('click', async function() {
      const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
      const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked');
      
      if (!selectedAddress || !paymentMethod) {
        alert('Please select both address and payment method');
        return;
      }

      const addressIndex = parseInt(selectedAddress.value);
      const selectedAddressData = userAddresses[addressIndex];

      if (!selectedAddressData) {
        alert('Invalid address selected. Please try again.');
        return;
      }

      const button = this;
      button.disabled = true;
      button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Placing Order...';

      try {
        const orderResponse = await fetch('/user/place-order', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            addressId: selectedAddressData._id,
            address: {
              name: selectedAddressData.name,
              address: selectedAddressData.addressType,
              city: selectedAddressData.city,
              state: selectedAddressData.state,
              pincode: selectedAddressData.pincode,
              phone: selectedAddressData.phone
            },
            paymentMethod: paymentMethod.value
          })
        });

        const orderData = await orderResponse.json();

        if (!orderData.success) {
          throw new Error(orderData.message || 'Failed to place order');
        }

        if (paymentMethod.value === 'razorpay') {
          const paymentResponse = await fetch('/user/create-razorpay-order', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              amount: orderData.total,
              orderId: orderData.orderId
            })
          });

          const paymentData = await paymentResponse.json();

          if (!paymentData.success) {
            throw new Error(paymentData.message || 'Failed to create payment');
          }

          const options = {
            key: '<%= process.env.RAZORPAY_KEY_ID %>',
            amount: paymentData.order.amount,
            currency: paymentData.order.currency,
            name: 'Euphoria',
            description: 'Order Payment',
            order_id: paymentData.order.id,
            handler: async function(response) {
              try {
                const verifyResponse = await fetch('/user/verify-razorpay-payment', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    razorpay_order_id: response.razorpay_order_id,
                    razorpay_payment_id: response.razorpay_payment_id,
                    razorpay_signature: response.razorpay_signature,
                    orderId: orderData.orderId
                  })
                });

                const verifyData = await verifyResponse.json();

                if (verifyData.success) {
                  const placeOrderResponse = await fetch('/user/place-order', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      addressId: selectedAddressData._id,
                      address: {
                        name: selectedAddressData.name,
                        address: selectedAddressData.addressType,
                        city: selectedAddressData.city,
                        state: selectedAddressData.state,
                        pincode: selectedAddressData.pincode,
                        phone: selectedAddressData.phone
                      },
                      paymentMethod: 'razorpay',
                      paymentId: response.razorpay_payment_id
                    })
                  });

                  const placeOrderData = await placeOrderResponse.json();

                  if (placeOrderData.success) {
                    window.location.href = '/user/order-success/' + placeOrderData.orderId;
                  } else {
                    window.location.href = '/user/order-success/' + orderData.orderId;
                  }
                } else {
                  window.location.href = '/user/payment-failed/' + orderData.orderId;
                }
              } catch (error) {
                console.error('Payment verification error:', error);
                window.location.href = '/user/payment-failed/' + orderData.orderId;
              }
            },
            prefill: {
              name: selectedAddressData.name,
              contact: selectedAddressData.phone,
              email: '<%= user.email %>'
            },
            theme: {
              color: '#5D4037'
            },
            modal: {
              ondismiss: function() {
                window.location.href = '/user/payment-failed/' + orderData.orderId;
              }
            }
          };

          const rzp = new Razorpay(options);
          rzp.open();
        } else if (paymentMethod.value === 'wallet') {
          window.location.href = '/user/order-success/' + orderData.orderId;
        } else {
          window.location.href = '/user/order-success/' + orderData.orderId;
        }
      } catch (error) {
        console.error('Order error:', error);
        alert(error.message || 'Error placing order. Please try again.');
        button.disabled = false;
        button.innerHTML = 'Complete Order';
      }
    });

    function selectPayment(method) {
      document.querySelectorAll('.payment-option').forEach(option => {
        option.classList.remove('payment-option-selected');
      });
      
      document.querySelectorAll('input[name="paymentMethod"]').forEach(radio => {
        if (radio.value === method) {
          radio.checked = true;
          radio.closest('.payment-option').classList.add('payment-option-selected');
        }
      });
    }
    
    document.addEventListener('DOMContentLoaded', function() {
      const initialPayment = document.querySelector('input[name="paymentMethod"]:checked').value;
      selectPayment(initialPayment);
    });

    function editAddress(addressId) {
      window.location.href = `/edit-address/${addressId}?redirect=checkout`;
    }
  </script>

  <script>
  async function updateCartSummary(total, discount, couponCode) {
    document.querySelector('.summary-total span:last-child').textContent = '₹' + total.toFixed(2);

    let discountLine = Array.from(document.querySelectorAll('.summary-line')).find(div => div.textContent.includes('Discount'));
    if (discount > 0) {
      if (!discountLine) {
        discountLine = document.createElement('div');
        discountLine.className = 'summary-line';
        discountLine.innerHTML = `<span>Discount</span><span>- ₹${discount.toFixed(2)}</span>`;
        document.querySelector('.summary-total').insertAdjacentElement('beforebegin', discountLine);
      } else {
        discountLine.querySelector('span:last-child').textContent = '- ₹' + discount.toFixed(2);
      }
    } else if (discountLine) {
      discountLine.remove();
    }

    const couponInput = document.getElementById('couponCode');
    if (couponInput) {
      if (couponCode) {
        couponInput.readOnly = true;
        couponInput.value = couponCode;
      } else {
        couponInput.readOnly = false;
        couponInput.value = '';
      }
    }
    

    const applyBtn = document.getElementById('applyCouponBtn');
    const removeBtn = document.getElementById('removeCouponBtn');
    if (couponCode) {
      if (applyBtn) applyBtn.style.display = 'none';
      if (removeBtn) removeBtn.style.display = '';
    } else {
      if (applyBtn) applyBtn.style.display = '';
      if (removeBtn) removeBtn.style.display = 'none';
    }
  }

  async function applyCoupon(couponCode) {
    const messageDiv = document.getElementById('couponMessage');
    messageDiv.innerHTML = '';

    if (!couponCode) {
      messageDiv.innerHTML = '<div class="alert alert-warning">Please enter a coupon code</div>';
      return;
    }

    try {
      const response = await fetch('/apply-coupon', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ couponCode })
      });

      const data = await response.json();

      if (data.success) {
        messageDiv.innerHTML = '<div class="alert alert-success">' + data.message + '</div>';
        updateCartSummary(data.newTotal, data.appliedCoupon.discount, data.appliedCoupon.code);
      } else {
        messageDiv.innerHTML = '<div class="alert alert-danger">' + data.message + '</div>';
      }
    } catch (error) {
      console.error('Error applying coupon:', error);
      messageDiv.innerHTML = '<div class="alert alert-danger">An error occurred while applying the coupon</div>';
    }
  }

  async function removeCoupon() {
    const messageDiv = document.getElementById('couponMessage');
    messageDiv.innerHTML = '';

    try {
      const response = await fetch('/remove-coupon', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });

      const data = await response.json();

      if (data.success) {
        messageDiv.innerHTML = '<div class="alert alert-success">' + data.message + '</div>';
        updateCartSummary(data.newTotal, 0, null);
      } else {
        messageDiv.innerHTML = '<div class="alert alert-danger">' + data.message + '</div>';
      }
    } catch (error) {
      console.error('Error removing coupon:', error);
      messageDiv.innerHTML = '<div class="alert alert-danger">An error occurred while removing the coupon</div>';
    }
  }

  document.getElementById('applyCouponBtn')?.addEventListener('click', function () {
    const couponCode = document.getElementById('couponCode').value.trim();
    applyCoupon(couponCode);
  });

  document.querySelectorAll('.apply-available-coupon').forEach(button => {
    button.addEventListener('click', function () {
      const couponCode = this.dataset.couponCode;
      applyCoupon(couponCode);
    });
  });

  document.getElementById('removeCouponBtn')?.addEventListener('click', removeCoupon);
</script>

</body>
</html>